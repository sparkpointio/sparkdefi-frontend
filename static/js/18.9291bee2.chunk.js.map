{"version":3,"sources":["views/Predictions/components/History/Header.tsx","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollRoundData.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/Card.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/BlockProgress.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","hooks/useGetBlockCountdown.ts","views/Predictions/hooks/useRoundCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/Positions.tsx","views/Predictions/Mobile.tsx","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx"],"names":["HistoryTabs","useGetLatestOraclePrice","useState","BIG_ZERO","price","setPrice","useLastUpdated","lastUpdated","refresh","setLastUpdated","chainlinkOracleContract","useChainlinkOracleContract","useEffect","a","methods","latestAnswer","call","response","getBalanceAmount","BigNumber","fetchPrice","usePollOraclePrice","seconds","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollRoundData","account","useWeb3React","getMarketData","marketData","updateMarketData","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","ref","useRef","predictionStatus","useGetPredictionsStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","isCancelled","current","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","onClick","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","value","destroySwiper","destroy","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","code","then","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","getBnbAmount","bnbBn","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","getTimePeriods","hours","minutes","minutesSeconds","getMultiplier","total","amount","getPayout","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getBubbleGumBackground","Modal","ModalContainer","CollectRoundWinningsModal","payout","roundId","epoch","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","predictionsContract","usePredictionsContract","bnbBusdPrice","usePriceBnbBusd","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","fontSize","times","toNumber","claim","send","from","once","result","markBetAsCollected","transactionHash","href","getBscScanTransactionUrl","error","message","console","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","getPrizePoolAmount","Row","PrizePoolRow","bold","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","lockPrice","Background","Box","isNext","isLive","hasEntered","success","BEAR","failure","cardBorder","StyledRoundResultBox","card","background","RoundResultBox","RoundResult","closePrice","isPositionUp","priceDifference","failed","useIsRefundable","isRefundable","setIsRefundable","claimable","refundable","fetchRefundableStatus","StyledBetResult","textDisabled","BetResult","canClaim","useBetCanClaim","Result","WIN","getHeaderColor","LOSE","CANCELED","handleSuccess","fetchBet","getHeaderText","getHeaderIcon","claimedHash","getResultColor","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","LIVE","getBscScanBlockNumberUrl","lockBlock","external","endBlock","StyledBet","attrs","YourResult","HistoricalBet","currentEpoch","useGetCurrentEpoch","status","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","PredictionStatus","role","scale","Filter","label","StyledHeader","ButtonMenuContainer","getClaimParam","historyFilter","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","Header","activeTab","setActiveTab","useGetHistoryFilter","isFetchingHistory","useGetIsFetchingHistory","handleChange","newFilter","fetchHistory","setHistoryFilter","switchTab","tabIndex","size","activeIndex","onItemClick","ROUNDS","checked","onChange","RoundsTab","hasBetHistory","orderBy","map","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","toFixed","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","type","summary","rounds","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","Divider","backgroundDisabled","initialPnlSummary","bestRound","getPnlSummary","reduce","rawPayout","getNetPayout","PnlTab","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","getBscScanAddressUrl","StyledHistory","BetWrapper","SpinnerWrapper","History","useGetHistoryByAccount","results","getUnclaimedWinningBets","activeTabComponent","PNL","UnlockButton","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","values","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","StyledEnteredTag","EnteredTag","useTooltip","whiteSpace","placement","targetRef","tooltipVisible","tooltip","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","betAmount","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","Card","UIKitCard","getTextColorByStatus","StyledCardHeader","cardHeader","warning","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","CanceledRoundCard","useGetTotalIntervalBlocks","estimatedEndBlock","startBlock","blockNumber","my","StyledExpiredRoundCard","ExpiredRoundCard","hasEnteredUp","hasEnteredDown","useGetBetByRoundId","BlockProgress","rawProgress","useBlock","currentBlock","progress","primaryStep","CalculatingCard","GradientBorder","GradientCard","LiveRoundCard","totalInterval","useGetIntervalBlocks","useGetLastOraclePrice","isBull","gt","priceColor","minus","useCountUp","start","end","duration","decimals","countUp","update","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","gasPrice","BIG_TEN","pow","BIG_NINE","dust","DEFAULT_TOKEN_DECIMAL","percentShortcuts","SetPositionCard","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","bnbBalance","useGetBnbBalance","balance","minBetAmount","useGetMinBetAmount","balanceDisplay","useMemo","maxBalance","minBetAmountBalance","valueAsBn","showFieldWarning","percent","setPercent","handlePercentChange","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","toFormat","lte","eq","isNaN","key","lt","getButtonProps","bnValue","data","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","percentage","Math","floor","min","isWarning","inputProps","name","max","onValueChanged","valueLabel","step","percentShortcut","betMethod","decimalValue","getDecimalAmount","errorMsg","OpenRoundCard","isSettingPosition","state","setState","isBufferPhase","positionDisplay","estimatedLockBlock","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","hash","markPositionAsEntered","useBlockCountdown","secondsRemaining","setSecondsRemaining","web3NoAccount","eth","getBlockNumber","BSC_BLOCK_TIME","prevSecondsRemaining","startCountdown","useRoundCountdown","intervalsToAdd","currentRoundBlockNum","useGetCurrentRoundBlockNumber","blocksToAdd","SoonRoundCard","countdown","RoundCard","Token","lg","Title","Text","Price","Interval","Label","dir","PricePairLabel","display","TimerLabel","unit","pr","StyledPrevNextNav","Icon","PrevNextNav","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","target","rel","useOnNextRound","previousEpoch","usePreviousValue","fetchCurrentBets","roundIds","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","initialIndex","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","resizeObserver","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","useIsChartPaneOpen","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","view","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","bubblegum","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","ChartDisclaimer","Predictions","isXl","useMatchBreakpoints","usePersistState","localStorageKey","hasAcceptedRisk","setHasAcceptedRisk","hasAcceptedChart","setHasAcceptedChart","initialBlock","useInitialBlock","isDesktop","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","all","getStaticPredictionsData","staticPredictionsData","intervalBlocks","bufferBlocks","latestRound","find","market","paused","setPredictionStatus","currentRoundStartBlock","Number","futureRounds","halfInterval","i","push","makeFutureRoundResponse","roundData","makeRoundData","transformRoundResponse","initialize","currentRoundStartBlockNumber","history","fetchInitialData","INITIAL","PageLoader"],"mappings":"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","file":"static/js/18.9291bee2.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowForwardIcon,\r\n  Box,\r\n  Button,\r\n  Radio,\r\n  Flex,\r\n  Heading,\r\n  Text,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\r\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { getBubbleGumBackground } from '../../helpers'\r\n\r\nconst Filter = styled.label`\r\n  align-items: center;\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  margin-right: 16px;\r\n`\r\n\r\nconst StyledHeader = styled(Box)`\r\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\r\n  flex: none;\r\n  padding: 16px;\r\n`\r\n\r\nconst ButtonMenuContainer = styled.div`\r\n  width: 100%;\r\n  & > div {\r\n    width: 100%;\r\n  }\r\n\r\n  & button {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst getClaimParam = (historyFilter: HistoryFilter) => {\r\n  switch (historyFilter) {\r\n    case HistoryFilter.COLLECTED:\r\n      return true\r\n    case HistoryFilter.UNCOLLECTED:\r\n      return false\r\n    case HistoryFilter.ALL:\r\n    default:\r\n      return undefined\r\n  }\r\n}\r\n\r\ninterface HeaderProps {\r\n  activeTab: HistoryTabs\r\n  setActiveTab: (value: HistoryTabs) => void\r\n}\r\n\r\nexport enum HistoryTabs {\r\n  ROUNDS,\r\n  PNL,\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\r\n  const historyFilter = useGetHistoryFilter()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(false))\r\n  }\r\n\r\n  const handleChange = (newFilter: HistoryFilter) => async () => {\r\n    if (newFilter !== historyFilter) {\r\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\r\n      dispatch(setHistoryFilter(newFilter))\r\n    }\r\n  }\r\n\r\n  const switchTab = async (tabIndex: number) => {\r\n    setActiveTab(tabIndex)\r\n    await handleChange(HistoryFilter.ALL)()\r\n  }\r\n\r\n  return (\r\n    <StyledHeader>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n        <Heading as=\"h3\" size=\"md\">\r\n          {t('History')}\r\n        </Heading>\r\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\r\n          {t('Close')}\r\n        </Button>\r\n      </Flex>\r\n      <ButtonMenuContainer>\r\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\r\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\r\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </ButtonMenuContainer>\r\n      {activeTab === HistoryTabs.ROUNDS && (\r\n        <>\r\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n            {t('Filter')}\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.ALL}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.ALL)}\r\n              />\r\n              <Text ml=\"4px\">{t('All')}</Text>\r\n            </Filter>\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.COLLECTED}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.COLLECTED)}\r\n              />\r\n              <Text ml=\"4px\">{t('Collected')}</Text>\r\n            </Filter>\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\r\n              />\r\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\r\n            </Filter>\r\n          </Flex>\r\n        </>\r\n      )}\r\n    </StyledHeader>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useChainlinkOracleContract } from 'hooks/useContract'\r\nimport useLastUpdated from 'hooks/useLastUpdated'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\n\r\nconst useGetLatestOraclePrice = () => {\r\n  const [price, setPrice] = useState(BIG_ZERO)\r\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\r\n  const chainlinkOracleContract = useChainlinkOracleContract()\r\n\r\n  useEffect(() => {\r\n    const fetchPrice = async () => {\r\n      const response = await chainlinkOracleContract.methods.latestAnswer().call()\r\n      setPrice(getBalanceAmount(new BigNumber(response), 8))\r\n    }\r\n\r\n    fetchPrice()\r\n  }, [chainlinkOracleContract, lastUpdated, setPrice])\r\n\r\n  return { price, lastUpdated, refresh }\r\n}\r\n\r\nexport default useGetLatestOraclePrice\r\n","import { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { setLastOraclePrice } from 'state/predictions'\r\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\r\n\r\nconst usePollOraclePrice = (seconds = 30) => {\r\n  const { price, refresh } = useGetLatestOraclePrice()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Poll for the oracle price\r\n  useEffect(() => {\r\n    refresh()\r\n    const timer = setInterval(() => {\r\n      refresh()\r\n    }, seconds * 1000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [seconds, refresh])\r\n\r\n  // If the price changed update global state\r\n  useEffect(() => {\r\n    dispatch(setLastOraclePrice(price.toJSON()))\r\n  }, [price, dispatch])\r\n}\r\n\r\nexport default usePollOraclePrice\r\n","import { useWeb3React } from '@web3-react/core'\r\nimport { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateMarketData } from 'state/predictions'\r\nimport { getMarketData } from 'state/predictions/helpers'\r\n\r\nconst POLL_TIME_IN_SECONDS = 10\r\n\r\nconst usePollRoundData = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(async () => {\r\n      const marketData = await getMarketData()\r\n\r\n      dispatch(updateMarketData(marketData))\r\n    }, POLL_TIME_IN_SECONDS * 1000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [account, dispatch])\r\n}\r\n\r\nexport default usePollRoundData\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\r\n  height: calc(100vh - 64px);\r\n  min-height: calc(100vh - 64px);\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nexport default Container\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled, { css, keyframes } from 'styled-components'\r\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBetHistory } from 'state/predictions/helpers'\r\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\n\r\n/**\r\n * @see https://github.com/animate-css/animate.css/tree/main/source\r\n */\r\nconst bounceInKeyframe = keyframes`\r\n  from,\r\n  60%,\r\n  75%,\r\n  90%,\r\n  to {\r\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\r\n  }\r\n\r\n  from {\r\n    opacity: 0;\r\n    transform: translate3d(0, 3000px, 0) scaleY(5);\r\n  }\r\n\r\n  60% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  75% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\r\n  }\r\n\r\n  90% {\r\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\r\n  }\r\n\r\n  to {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n`\r\n\r\nconst bounceOutKeyframe = keyframes`\r\n  20% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\r\n  }\r\n\r\n  40%,\r\n  45% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n    transform: translate3d(0, 2000px, 0) scaleY(3);\r\n  }\r\n`\r\n\r\nconst bounceInAnimation = css`\r\n  animation: ${bounceInKeyframe} 1s;\r\n`\r\n\r\nconst bounceOutAnimation = css`\r\n  animation: ${bounceOutKeyframe} 1s;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  bottom: 72px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  left: 0;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 50;\r\n\r\n  &.popup-enter-active {\r\n    ${bounceInAnimation}\r\n  }\r\n\r\n  &.popup-enter-done {\r\n    bottom: 72px;\r\n  }\r\n\r\n  &.popup-exit-done {\r\n    bottom: -2000px;\r\n  }\r\n\r\n  &.popup-exit-active {\r\n    ${bounceOutAnimation}\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    bottom: 16px;\r\n    justify-content: flex-end;\r\n\r\n    &.popup-enter-done {\r\n      bottom: 16px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Popup = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  border-radius: 32px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  max-width: 320px;\r\n  padding: 16px 8px;\r\n`\r\n\r\nconst CollectWinningsPopup = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { t } = useTranslation()\r\n  const ref = useRef(null)\r\n  const timer = useRef(null)\r\n  const { account } = useWeb3React()\r\n  const predictionStatus = useGetPredictionsStatus()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setIsOpen(false)\r\n    clearInterval(timer.current)\r\n  }\r\n\r\n  // Check user's history for unclaimed winners\r\n  useEffect(() => {\r\n    let isCancelled = false\r\n    if (account) {\r\n      timer.current = setInterval(async () => {\r\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\r\n\r\n        if (!isCancelled) {\r\n          // Filter out bets that were not winners\r\n          const winnerBets = bets.filter((bet) => {\r\n            return bet.position === bet.round.position\r\n          })\r\n\r\n          if (!isHistoryPaneOpen) {\r\n            setIsOpen(winnerBets.length > 0)\r\n          }\r\n        }\r\n      }, 30000)\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n      isCancelled = true\r\n    }\r\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\r\n\r\n  // Any time the history pane is open make sure the popup closes\r\n  useEffect(() => {\r\n    if (isHistoryPaneOpen) {\r\n      setIsOpen(false)\r\n    }\r\n  }, [isHistoryPaneOpen, setIsOpen])\r\n\r\n  return (\r\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\r\n      <Wrapper ref={ref}>\r\n        <Popup>\r\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\r\n            {t('Collect Winnings')}\r\n          </Button>\r\n          <IconButton variant=\"text\" onClick={handleClick}>\r\n            <CloseIcon color=\"primary\" width=\"24px\" />\r\n          </IconButton>\r\n        </Popup>\r\n      </Wrapper>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsPopup\r\n","import React, { createContext, Dispatch, useState } from 'react'\r\nimport SwiperCore from 'swiper'\r\n\r\ninterface Context {\r\n  swiper: SwiperCore\r\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\r\n  destroySwiper: () => void\r\n}\r\n\r\nexport const SwiperContext = createContext<Context>(undefined)\r\n\r\nconst SwiperProvider = ({ children }) => {\r\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\r\n\r\n  const destroySwiper = () => {\r\n    if (swiper) {\r\n      swiper.destroy()\r\n      setSwiper(null)\r\n    }\r\n  }\r\n\r\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\r\n}\r\n\r\nexport default SwiperProvider\r\n","import React, { useEffect } from 'react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { DefaultTheme, useTheme } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\n/**\r\n * When the script tag is injected the TradingView object is not immediately\r\n * available on the window. So we listen for when it gets set\r\n */\r\nconst tradingViewListener = async () =>\r\n  new Promise<void>((resolve) =>\r\n    Object.defineProperty(window, 'TradingView', {\r\n      configurable: true,\r\n      set(value) {\r\n        this.tv = value\r\n        resolve(value)\r\n      },\r\n    }),\r\n  )\r\n\r\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\r\n  /* eslint-disable new-cap */\r\n  /* eslint-disable no-new */\r\n  // @ts-ignore\r\n  new TradingViewObj.widget({\r\n    autosize: true,\r\n    height: '100%',\r\n    symbol: 'BINANCE:BNBUSDT',\r\n    interval: '5',\r\n    timezone: 'Etc/UTC',\r\n    theme: theme.isDark ? 'dark' : 'light',\r\n    style: '1',\r\n    locale: localeCode,\r\n    toolbar_bg: '#f1f3f6',\r\n    enable_publishing: false,\r\n    allow_symbol_change: true,\r\n    container_id: 'tradingview_b239c',\r\n  })\r\n}\r\n\r\nconst TradingView = () => {\r\n  const { currentLanguage } = useTranslation()\r\n  const theme = useTheme()\r\n\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    if (window.TradingView) {\r\n      // @ts-ignore\r\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\r\n    } else {\r\n      tradingViewListener().then((tv) => {\r\n        initializeTradingView(tv, theme, currentLanguage.code)\r\n      })\r\n    }\r\n  }, [theme, currentLanguage])\r\n\r\n  return (\r\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\r\n      <div id=\"tradingview_b239c\" />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default TradingView\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface NotificationProps {\r\n  title: string\r\n}\r\n\r\n// const BunnyDecoration = styled.div`\r\n//   position: absolute;\r\n//   top: -130px; // line up bunny at the top of the modal\r\n//   left: 0px;\r\n//   text-align: center;\r\n//   width: 100%;\r\n// `\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 100%;\r\n  justify-content: center;\r\n`\r\n\r\nconst CardWrapper = styled.div`\r\n  position: relative;\r\n  width: 320px;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -130px;\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n  z-index: 5;\r\n`\r\n\r\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\r\n  return (\r\n    <Wrapper>\r\n      <CardWrapper>\r\n        <BunnyDecoration>\r\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\r\n        </BunnyDecoration>\r\n        <Card>\r\n          <CardBody>\r\n            <Heading mb=\"24px\">{title}</Heading>\r\n            {children}\r\n          </CardBody>\r\n        </Card>\r\n      </CardWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\nimport { Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst ErrorNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n  return (\r\n    <Notification title={t('Error')}>\r\n      <Text as=\"p\" mb=\"24px\">\r\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\r\n      </Text>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default ErrorNotification\r\n","import React from 'react'\r\nimport { Box, Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst PauseNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <Notification title={t('Markets Paused')}>\r\n      <Box mb=\"24px\">\r\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\r\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\r\n        <Text as=\"p\">\r\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\r\n        </Text>\r\n      </Box>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default PauseNotification\r\n","import BigNumber from 'bignumber.js'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { DefaultTheme } from 'styled-components'\r\nimport { formatNumber, getBalanceAmount } from 'utils/formatBalance'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\n\r\nexport const getBnbAmount = (bnbBn: BigNumber) => {\r\n  return getBalanceAmount(bnbBn, 18)\r\n}\r\n\r\nexport const formatUsd = (usd: number) => {\r\n  return `$${formatNumber(usd || 0, 3, 3)}`\r\n}\r\n\r\nexport const formatBnb = (bnb: number) => {\r\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\r\n}\r\n\r\nexport const formatBnbFromBigNumber = (bnbBn: BigNumber) => {\r\n  return formatBnb(getBnbAmount(bnbBn).toNumber())\r\n}\r\n\r\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\r\n\r\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\r\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\r\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\r\n\r\n  if (hours > 0) {\r\n    return `${padTime(hours)}:${minutesSeconds}`\r\n  }\r\n\r\n  return minutesSeconds\r\n}\r\n\r\nexport const getMultiplier = (total: number, amount: number) => {\r\n  if (total === 0 || amount === 0) {\r\n    return 0\r\n  }\r\n\r\n  return total / amount\r\n}\r\n\r\n/**\r\n * Calculates the total payout given a bet\r\n */\r\nexport const getPayout = (bet: Bet) => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const { bullAmount, bearAmount, totalAmount } = bet.round\r\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n  return bet.amount * multiplier\r\n}\r\n\r\n// TODO: Move this to the UI Kit\r\nexport const getBubbleGumBackground = (theme: DefaultTheme) => {\r\n  if (theme.isDark) {\r\n    return 'linear-gradient(139.73deg, #142339 0%, #24243D 47.4%, #37273F 100%)'\r\n  }\r\n\r\n  return 'linear-gradient(139.73deg, #E6FDFF 0%, #EFF4F5 46.87%, #F3EFFF 100%)'\r\n}\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  ModalTitle,\r\n  ModalHeader,\r\n  InjectedModalProps,\r\n  Button,\r\n  AutoRenewIcon,\r\n  TrophyGoldIcon,\r\n  Text,\r\n  Flex,\r\n  Heading,\r\n  Box,\r\n  LinkExternal,\r\n  ModalCloseButton,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBscScanTransactionUrl } from 'utils/bscscan'\r\nimport { useAppDispatch } from 'state'\r\nimport { usePriceBnbBusd } from 'state/hooks'\r\nimport { markBetAsCollected } from 'state/predictions'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { formatBnb } from '../helpers'\r\n\r\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\r\n  payout: number\r\n  roundId: string\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst Modal = styled(ModalContainer)`\r\n  overflow: visible;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -116px; // line up bunny at the top of the modal\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n`\r\n\r\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\r\n  payout,\r\n  roundId,\r\n  epoch,\r\n  onDismiss,\r\n  onSuccess,\r\n}) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const predictionsContract = usePredictionsContract()\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleClick = () => {\r\n    predictionsContract.methods\r\n      .claim(epoch)\r\n      .send({ from: account })\r\n      .once('sending', () => {\r\n        setIsPendingTx(true)\r\n      })\r\n      .once('receipt', async (result) => {\r\n        if (onSuccess) {\r\n          await onSuccess()\r\n        }\r\n\r\n        dispatch(markBetAsCollected({ account, roundId }))\r\n        onDismiss()\r\n        setIsPendingTx(false)\r\n        toastSuccess(\r\n          t('Winnings collected!'),\r\n          <Box>\r\n            <Text as=\"p\" mb=\"8px\">\r\n              {t('Your prizes have been sent to your wallet')}\r\n            </Text>\r\n            {result.transactionHash && (\r\n              <LinkExternal href={getBscScanTransactionUrl(result.transactionHash)}>\r\n                {t('View on BscScan')}\r\n              </LinkExternal>\r\n            )}\r\n          </Box>,\r\n        )\r\n      })\r\n      .once('error', (error) => {\r\n        setIsPendingTx(false)\r\n        toastError(t('Error'), error?.message)\r\n        console.error(error)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\r\n      <BunnyDecoration>\r\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\r\n      </BunnyDecoration>\r\n      <ModalHeader>\r\n        <ModalTitle>\r\n          <Heading>{t('Collect Winnings')}</Heading>\r\n        </ModalTitle>\r\n        <ModalCloseButton onDismiss={onDismiss} />\r\n      </ModalHeader>\r\n      <ModalBody p=\"24px\">\r\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\r\n          <Text>{t('Collecting')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text>{`${formatBnb(payout)} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        <Button\r\n          width=\"100%\"\r\n          mb=\"8px\"\r\n          onClick={handleClick}\r\n          isLoading={isPendingTx}\r\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CollectRoundWinningsModal\r\n","import React from 'react'\r\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\r\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\r\n\r\ninterface CollectWinningsButtonProps extends ButtonProps {\r\n  payout: number\r\n  roundId: string\r\n  epoch: number\r\n  hasClaimed: boolean\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\r\n  payout,\r\n  roundId,\r\n  epoch,\r\n  hasClaimed,\r\n  onSuccess,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const [onPresentCollectWinningsModal] = useModal(\r\n    <CollectRoundWinningsModal payout={payout} roundId={roundId} epoch={epoch} onSuccess={onSuccess} />,\r\n    false,\r\n  )\r\n\r\n  return (\r\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\r\n      {children}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsButton\r\n","import React, { ReactNode, useState } from 'react'\r\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface ReclaimPositionButtonProps extends ButtonProps {\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n  children?: ReactNode\r\n}\r\n\r\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const predictionsContract = usePredictionsContract()\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  const handleReclaim = () => {\r\n    predictionsContract.methods\r\n      .claim(epoch)\r\n      .send({ from: account })\r\n      .once('sending', () => {\r\n        setIsPendingTx(true)\r\n      })\r\n      .once('receipt', async () => {\r\n        if (onSuccess) {\r\n          await onSuccess()\r\n        }\r\n        setIsPendingTx(false)\r\n        toastSuccess(t('Position reclaimed!'))\r\n      })\r\n      .once('error', (error) => {\r\n        setIsPendingTx(false)\r\n        toastError(t('Error'), error?.message)\r\n        console.error(error)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleReclaim}\r\n      isLoading={isPendingTx}\r\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\r\n      {...props}\r\n    >\r\n      {children || t('Reclaim Position')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ReclaimPositionButton\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition } from 'state/types'\r\n\r\ninterface TagProps extends FlexProps {\r\n  bg?: string\r\n  startIcon?: ReactNode\r\n}\r\n\r\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\r\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\r\n  display: inline-flex;\r\n`\r\n\r\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\r\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\r\n\r\n  return (\r\n    <StyledTag\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      borderRadius=\"4px\"\r\n      bg={bg}\r\n      py=\"4px\"\r\n      px=\"8px\"\r\n      onClick={onClick}\r\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\r\n      {...props}\r\n    >\r\n      {icon}\r\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\r\n        {children}\r\n      </Text>\r\n    </StyledTag>\r\n  )\r\n}\r\n\r\ninterface PositionTagProps extends FlexProps {\r\n  betPosition: BetPosition\r\n}\r\n\r\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\r\n  const isUpPosition = betPosition === BetPosition.BULL\r\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\r\n\r\n  return (\r\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\r\n      {children}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport default PositionTag\r\n","import React from 'react'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { formatBnb, formatUsd } from 'views/Predictions/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition, Round } from 'state/types'\r\n\r\n// PrizePoolRow\r\ninterface PrizePoolRowProps extends FlexProps {\r\n  totalAmount: Round['totalAmount']\r\n}\r\n\r\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\r\n  if (!totalAmount) {\r\n    return '0'\r\n  }\r\n\r\n  return formatBnb(totalAmount)\r\n}\r\n\r\nconst Row = ({ children, ...props }) => {\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n      {children}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text bold>{t('Prize Pool')}:</Text>\r\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// Payout Row\r\ninterface PayoutRowProps extends FlexProps {\r\n  positionLabel: string\r\n  multiplier: number\r\n  amount: number\r\n}\r\n\r\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\r\n\r\n  return (\r\n    <Row height=\"18px\" {...props}>\r\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\r\n        {positionLabel}:\r\n      </Text>\r\n      <Flex alignItems=\"center\">\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\r\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\r\n        </Text>\r\n        <Text mx=\"4px\">|</Text>\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\r\n      </Flex>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// LockPriceRow\r\ninterface LockPriceRowProps extends FlexProps {\r\n  lockPrice: Round['lockPrice']\r\n}\r\n\r\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\r\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// RoundResultBox\r\ninterface RoundResultBoxProps {\r\n  betPosition?: BetPosition\r\n  isNext?: boolean\r\n  isLive?: boolean\r\n  hasEntered?: boolean\r\n}\r\n\r\nconst getBackgroundColor = ({\r\n  theme,\r\n  betPosition,\r\n  isNext,\r\n  isLive,\r\n  hasEntered,\r\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\r\n  if (isNext) {\r\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\r\n  }\r\n\r\n  if (hasEntered || isLive) {\r\n    return theme.colors.secondary\r\n  }\r\n\r\n  if (betPosition === BetPosition.BULL) {\r\n    return theme.colors.success\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return theme.colors.failure\r\n  }\r\n\r\n  return theme.colors.cardBorder\r\n}\r\n\r\nconst Background = styled(Box)<RoundResultBoxProps>`\r\n  background: ${getBackgroundColor};\r\n  border-radius: 16px;\r\n  padding: 2px;\r\n`\r\n\r\nconst StyledRoundResultBox = styled.div`\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 14px;\r\n  padding: 16px;\r\n`\r\n\r\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\r\n  isNext = false,\r\n  hasEntered = false,\r\n  isLive = false,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\r\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\r\n    </Background>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition, Round } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatUsd } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\r\n\r\ninterface RoundResultProps extends BoxProps {\r\n  round: Round\r\n}\r\n\r\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\r\n  const { lockPrice, closePrice, totalAmount } = round\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const isPositionUp = betPosition === BetPosition.BULL\r\n  const { t } = useTranslation()\r\n  const priceDifference = closePrice - lockPrice\r\n\r\n  return (\r\n    <RoundResultBox betPosition={betPosition} {...props}>\r\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n        {t('Closed Price')}\r\n      </Text>\r\n      {round.failed ? (\r\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\r\n          {t('Canceled')}\r\n        </Text>\r\n      ) : (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\r\n            {formatUsd(closePrice)}\r\n          </Text>\r\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\r\n        </Flex>\r\n      )}\r\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n      <PrizePoolRow totalAmount={totalAmount} />\r\n      {children}\r\n    </RoundResultBox>\r\n  )\r\n}\r\n\r\nexport default RoundResult\r\n","import { useEffect, useState } from 'react'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nconst useIsRefundable = (epoch: number) => {\r\n  const [isRefundable, setIsRefundable] = useState(false)\r\n  const predictionsContract = usePredictionsContract()\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const fetchRefundableStatus = async () => {\r\n      const canClaim = await predictionsContract.methods.claimable(epoch, account).call()\r\n\r\n      if (canClaim) {\r\n        const refundable = await predictionsContract.methods.refundable(epoch, account).call()\r\n        setIsRefundable(refundable)\r\n      } else {\r\n        setIsRefundable(false)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchRefundableStatus()\r\n    }\r\n  }, [account, epoch, predictionsContract, setIsRefundable])\r\n\r\n  return { isRefundable, setIsRefundable }\r\n}\r\n\r\nexport default useIsRefundable\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useBetCanClaim, usePriceBnbBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { fetchBet } from 'state/predictions'\r\nimport { Result } from 'state/predictions/helpers'\r\nimport { getBscScanTransactionUrl } from 'utils/bscscan'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { formatBnb, getPayout } from '../../helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport PositionTag from '../PositionTag'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\n\r\ninterface BetResultProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetResult = styled(Box)`\r\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\r\n  border-radius: 16px;\r\n  margin-bottom: 24px;\r\n  padding: 16px;\r\n`\r\n\r\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const canClaim = useBetCanClaim(account, bet.round.id)\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = result === Result.WIN ? getPayout(bet) : bet.amount\r\n\r\n  const getHeaderColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'warning'\r\n      case Result.LOSE:\r\n        return 'textSubtle'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getHeaderText = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return t('Win')\r\n      case Result.LOSE:\r\n        return t('Lose')\r\n      case Result.CANCELED:\r\n        return t('Canceled')\r\n      default:\r\n        return ''\r\n    }\r\n  }\r\n\r\n  const getHeaderIcon = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return <PrizeIcon color={getHeaderColor()} />\r\n      case Result.LOSE:\r\n      case Result.CANCELED:\r\n        return <BlockIcon color={getHeaderColor()} />\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  const getResultColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    await dispatch(fetchBet({ account, id: bet.id }))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Heading>{t('Your History')}</Heading>\r\n        <Flex alignItems=\"center\">\r\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\r\n            {getHeaderText()}\r\n          </Heading>\r\n          {getHeaderIcon()}\r\n        </Flex>\r\n      </Flex>\r\n      <StyledBetResult>\r\n        {result === Result.WIN && !canClaim && (\r\n          <CollectWinningsButton\r\n            payout={payout}\r\n            roundId={bet.round.id}\r\n            epoch={bet.round.epoch}\r\n            hasClaimed={!canClaim}\r\n            width=\"100%\"\r\n            mb=\"16px\"\r\n            onSuccess={handleSuccess}\r\n          >\r\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {bet.claimed && (\r\n          <Flex justifyContent=\"center\">\r\n            <LinkExternal href={getBscScanTransactionUrl(bet.claimedHash)} mb=\"16px\">\r\n              {t('View on BscScan')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        )}\r\n        {result === Result.CANCELED && isRefundable && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\r\n        )}\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your direction')}</Text>\r\n          <PositionTag betPosition={bet.position}>\r\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your position')}</Text>\r\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\r\n          <Text bold>{t('Your Result')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text bold color={getResultColor()}>{`${result === Result.LOSE ? '-' : '+'}${formatBnb(payout)} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n      </StyledBetResult>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BetResult\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Bet } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanBlockNumberUrl } from 'utils/bscscan'\r\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\r\nimport { Result } from 'state/predictions/helpers'\r\nimport { getMultiplier } from '../../helpers'\r\nimport { PayoutRow, RoundResult } from '../RoundResult'\r\nimport BetResult from './BetResult'\r\n\r\ninterface BetDetailsProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetDetails = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  padding: 24px;\r\n`\r\n\r\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const { totalAmount, bullAmount, bearAmount } = bet.round\r\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\r\n\r\n  return (\r\n    <StyledBetDetails>\r\n      {result === Result.CANCELED && (\r\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\r\n          {t(\r\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\r\n          )}\r\n        </Text>\r\n      )}\r\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\r\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\r\n      <RoundResult round={bet.round} mb=\"24px\">\r\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\r\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\r\n      </RoundResult>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text>{t('Opening Block')}</Text>\r\n        <Link href={getBscScanBlockNumberUrl(bet.round.lockBlock)} external>\r\n          {bet.round.lockBlock}\r\n        </Link>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text>{t('Closing Block')}</Text>\r\n        <Link href={getBscScanBlockNumberUrl(bet.round.endBlock)} external>\r\n          {bet.round.endBlock}\r\n        </Link>\r\n      </Flex>\r\n    </StyledBetDetails>\r\n  )\r\n}\r\n\r\nexport default BetDetails\r\n","import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  Box,\r\n  ChevronDownIcon,\r\n  ChevronUpIcon,\r\n  Flex,\r\n  IconButton,\r\n  PlayCircleOutlineIcon,\r\n  Text,\r\n  WaitIcon,\r\n} from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { Bet, PredictionStatus } from 'state/types'\r\nimport { useBetCanClaim, useGetCurrentEpoch, useGetPredictionsStatus } from 'state/hooks'\r\nimport { getRoundResult, Result } from 'state/predictions/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb, getPayout } from '../../helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport BetDetails from './BetDetails'\r\n\r\ninterface BetProps {\r\n  bet: Bet\r\n}\r\n\r\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  cursor: pointer;\r\n`\r\n\r\nconst YourResult = styled(Box)`\r\n  flex: 1;\r\n`\r\n\r\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { amount, round } = bet\r\n\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  const toggleOpen = () => setIsOpen(!isOpen)\r\n\r\n  const getRoundColor = (result) => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getRoundPrefix = (result) => {\r\n    if (result === Result.LOSE) {\r\n      return '-'\r\n    }\r\n\r\n    if (result === Result.WIN) {\r\n      return '+'\r\n    }\r\n\r\n    return ''\r\n  }\r\n\r\n  const roundResult = getRoundResult(bet, currentEpoch)\r\n  const resultTextColor = getRoundColor(roundResult)\r\n  const resultTextPrefix = getRoundPrefix(roundResult)\r\n  const isOpenRound = round.epoch === currentEpoch\r\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\r\n  const canClaim = useBetCanClaim(account, bet.round.id)\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = roundResult === Result.WIN ? getPayout(bet) : amount\r\n\r\n  const renderBetLabel = () => {\r\n    if (isOpenRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"primary\" bold>\r\n            {t('Starting Soon')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    if (isLiveRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"secondary\" bold>\r\n            {t('Live Now')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {t('Your Result')}\r\n        </Text>\r\n        <Text bold color={resultTextColor} lineHeight={1}>\r\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\r\n        </Text>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <StyledBet onClick={toggleOpen} role=\"button\">\r\n        <Box width=\"48px\">\r\n          <Text textAlign=\"center\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {t('Round')}\r\n            </Text>\r\n            <Text bold lineHeight={1}>\r\n              {round.epoch.toLocaleString()}\r\n            </Text>\r\n          </Text>\r\n        </Box>\r\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\r\n        {roundResult === Result.WIN && canClaim && (\r\n          <CollectWinningsButton\r\n            hasClaimed={!canClaim}\r\n            roundId={bet.round.id}\r\n            epoch={bet.round.epoch}\r\n            payout={payout}\r\n            scale=\"sm\"\r\n            mr=\"8px\"\r\n          >\r\n            {t('Collect')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {roundResult === Result.CANCELED && canClaim && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\r\n            {t('Reclaim')}\r\n          </ReclaimPositionButton>\r\n        )}\r\n        {!isOpenRound && !isLiveRound && (\r\n          <IconButton variant=\"text\" scale=\"sm\">\r\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n          </IconButton>\r\n        )}\r\n      </StyledBet>\r\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HistoricalBet\r\n","import React from 'react'\r\nimport { orderBy } from 'lodash'\r\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Bet } from 'state/types'\r\nimport HistoricalBet from './HistoricalBet'\r\n\r\ninterface RoundsTabProps {\r\n  hasBetHistory: boolean\r\n  bets: Bet[]\r\n}\r\n\r\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return hasBetHistory ? (\r\n    <>\r\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\r\n        <HistoricalBet key={bet.id} bet={bet} />\r\n      ))}\r\n    </>\r\n  ) : (\r\n    <Box p=\"24px\">\r\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n        {t('No prediction history available')}\r\n      </Heading>\r\n      <Text as=\"p\" textAlign=\"center\">\r\n        {t(\r\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n        )}\r\n      </Text>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default RoundsTab\r\n","// @ts-nocheck\r\n/**\r\n * There is ts-nocheck at the top of this file for the following reasons:\r\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\r\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\r\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\r\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\r\n * without also messing prettier.\r\n *\r\n * I'll leave TODO: comment here to check back later if there is update to types\r\n *\r\n */\r\nimport styled, { keyframes } from 'styled-components'\r\n\r\ninterface SliceProps {\r\n  length: number\r\n  offset?: number\r\n}\r\n\r\nexport const DrawAnimation = keyframes`\r\n  from {\r\n    stroke-dasharray: 0, 339.292\r\n  }\r\n  to {\r\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\r\n  }\r\n`\r\n\r\nexport const OffsetAnimation = keyframes`\r\n  from {\r\n    stroke-dashoffset: 0\r\n  }\r\n  to {\r\n    stroke-dashoffset: ${(props) => -props.offset};\r\n  }\r\n`\r\n\r\nexport const SVG = styled.svg`\r\n  width: 128px;\r\n  height: 128px;\r\n  transform: rotate(-90deg);\r\n`\r\n\r\nconst DefaultSlice = styled.circle<SliceProps>`\r\n  fill: none;\r\n  stroke-width: 16;\r\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\r\n`\r\n\r\nexport const LostSlice = styled(DefaultSlice)`\r\n  stroke: #ed4b9e;\r\n  animation: ${DrawAnimation} 1s ease;\r\n`\r\n\r\nexport const WonSlice = styled(DefaultSlice)`\r\n  stroke: #31d0aa;\r\n  stroke-dashoffset: ${(props) => -props.offset};\r\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  width: 128px;\r\n  height: 128px;\r\n`\r\n\r\nexport const Info = styled.div`\r\n  width: 128px;\r\n  height: 128px;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 2;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\r\n\r\n/**\r\n * Bare minimum chart that doesn't require any external dependencies\r\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\r\n */\r\n\r\ninterface PnlChartProps {\r\n  won: number\r\n  lost: number\r\n}\r\n\r\n// 2 * Pi * R\r\nconst CIRCUMFERENCE = 339.292\r\n\r\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\r\n  const { t } = useTranslation()\r\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\r\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\r\n  const paintWon = CIRCUMFERENCE - paintLost\r\n  return (\r\n    <Wrapper>\r\n      <SVG viewBox=\"0 0 128 128\">\r\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\r\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\r\n      </SVG>\r\n      <Info>\r\n        <Text small lineHeight=\"1\">\r\n          {t('Won')}\r\n        </Text>\r\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\r\n          {won}/{won + lost}\r\n        </Text>\r\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\r\n          {percentageWon}%\r\n        </Text>\r\n      </Info>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PnlChart\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { formatBnb } from 'views/Predictions/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ntype SummaryType = 'won' | 'lost' | 'entered'\r\n\r\ninterface SummaryRowProps {\r\n  type: SummaryType\r\n  summary: any\r\n  bnbBusdPrice: BigNumber\r\n}\r\n\r\nconst summaryTypeColors = {\r\n  won: 'success',\r\n  lost: 'failure',\r\n  entered: 'text',\r\n}\r\n\r\nconst summaryTypeSigns = {\r\n  won: '+',\r\n  lost: '-',\r\n  entered: '',\r\n}\r\n\r\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const color = summaryTypeColors[type]\r\n  const { rounds, amount } = summary[type]\r\n  const totalRounds = summary.entered.rounds\r\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\r\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\r\n  const displayAmount = type === 'won' ? summary[type].payout : amount\r\n\r\n  return (\r\n    <>\r\n      <Text mt=\"16px\" bold color=\"textSubtle\">\r\n        {t(typeTranslationKey)}\r\n      </Text>\r\n      <Flex>\r\n        <Flex flex=\"2\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {rounds} {t('Rounds').toLocaleLowerCase()}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"3\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SummaryRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { useGetCurrentEpoch, usePriceBnbBusd } from 'state/hooks'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { formatBnb, getMultiplier, getPayout } from 'views/Predictions/helpers'\r\nimport { getRoundResult, Result } from 'state/predictions/helpers'\r\nimport PnlChart from './PnlChart'\r\nimport SummaryRow from './SummaryRow'\r\n\r\ninterface PnlTabProps {\r\n  hasBetHistory: boolean\r\n  bets: Bet[]\r\n}\r\n\r\ninterface PnlCategory {\r\n  rounds: number\r\n  amount: number\r\n}\r\n\r\ninterface PnlSummary {\r\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\r\n  lost: PnlCategory\r\n  entered: PnlCategory\r\n}\r\n\r\nconst TREASURY_FEE = 0.03\r\n\r\nconst getNetPayout = (bet: Bet) => {\r\n  const rawPayout = getPayout(bet)\r\n  const fee = rawPayout * TREASURY_FEE\r\n  return rawPayout - fee - bet.amount\r\n}\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\r\n  height: 1px;\r\n  margin: 24px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst initialPnlSummary: PnlSummary = {\r\n  won: {\r\n    rounds: 0,\r\n    amount: 0,\r\n    payout: 0, // net payout after all deductions\r\n    bestRound: {\r\n      id: '0',\r\n      payout: 0, // net payout after all deductions\r\n      multiplier: 0,\r\n    },\r\n  },\r\n  lost: {\r\n    rounds: 0,\r\n    amount: 0,\r\n  },\r\n  entered: {\r\n    rounds: 0,\r\n    amount: 0,\r\n  },\r\n}\r\n\r\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\r\n  return bets.reduce((summary: PnlSummary, bet) => {\r\n    const roundResult = getRoundResult(bet, currentEpoch)\r\n    if (roundResult === Result.WIN) {\r\n      const payout = getNetPayout(bet)\r\n      let { bestRound } = summary.won\r\n      if (payout > bestRound.payout) {\r\n        const { bullAmount, bearAmount, totalAmount } = bet.round\r\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n        bestRound = { id: bet.round.id, payout, multiplier }\r\n      }\r\n      return {\r\n        won: {\r\n          rounds: summary.won.rounds + 1,\r\n          amount: summary.won.amount + bet.amount,\r\n          payout: summary.won.payout + payout,\r\n          bestRound,\r\n        },\r\n        entered: {\r\n          rounds: summary.entered.rounds + 1,\r\n          amount: summary.entered.amount + bet.amount,\r\n        },\r\n        lost: summary.lost,\r\n      }\r\n    }\r\n    if (roundResult === Result.LOSE) {\r\n      return {\r\n        lost: {\r\n          rounds: summary.lost.rounds + 1,\r\n          amount: summary.lost.amount + bet.amount,\r\n        },\r\n        entered: {\r\n          rounds: summary.entered.rounds + 1,\r\n          amount: summary.entered.amount + bet.amount,\r\n        },\r\n        won: summary.won,\r\n      }\r\n    }\r\n    // Ignore Canceled and Live rounds\r\n    return summary\r\n  }, initialPnlSummary)\r\n}\r\n\r\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n\r\n  const summary = getPnlSummary(bets, currentEpoch)\r\n  const netResultAmount = summary.won.payout - summary.lost.amount\r\n  const netResultIsPositive = netResultAmount > 0\r\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\r\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\r\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\r\n\r\n  // Guard in case user has only lost rounds\r\n  const hasBestRound = summary.won.bestRound.payout !== 0\r\n\r\n  return hasBetHistory ? (\r\n    <Box p=\"16px\">\r\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\r\n        {t('Your history')}\r\n      </Text>\r\n      <Flex>\r\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\r\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\r\n          <Text bold color=\"textSubtle\">\r\n            {t('Net results')}\r\n          </Text>\r\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\r\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\r\n          </Text>\r\n          <Text small color=\"textSubtle\">\r\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <Box pl=\"8px\">\r\n        <Text mt=\"24px\" bold color=\"textSubtle\">\r\n          {t('Average return / round')}\r\n        </Text>\r\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\r\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\r\n        </Text>\r\n        <Text small color=\"textSubtle\">\r\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\r\n        </Text>\r\n\r\n        {hasBestRound && (\r\n          <>\r\n            <Text mt=\"16px\" bold color=\"textSubtle\">\r\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\r\n            </Text>\r\n            <Flex alignItems=\"flex-end\">\r\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\r\n              <Text ml=\"4px\" small color=\"textSubtle\">\r\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\r\n              </Text>\r\n            </Flex>\r\n            <Text small color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\r\n            </Text>\r\n          </>\r\n        )}\r\n\r\n        <Text mt=\"16px\" bold color=\"textSubtle\">\r\n          {t('Average position entered / round')}\r\n        </Text>\r\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\r\n        <Text small color=\"textSubtle\">\r\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\r\n        </Text>\r\n\r\n        <Divider />\r\n\r\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n\r\n        <Flex justifyContent=\"center\" mt=\"24px\">\r\n          <Link href={`${getBscScanAddressUrl(account)}#internaltx`} mb=\"16px\" external>\r\n            <Button mt=\"8px\" width=\"100%\">\r\n              {t('View Reclaimed & Won')}\r\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\r\n            </Button>\r\n          </Link>\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  ) : (\r\n    <Box p=\"24px\">\r\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n        {t('No prediction history available')}\r\n      </Heading>\r\n      <Text as=\"p\" textAlign=\"center\">\r\n        {t(\r\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n        )}\r\n      </Text>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default PnlTab\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { fetchHistory } from 'state/predictions'\r\nimport { getUnclaimedWinningBets } from 'state/predictions/helpers'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  useGetCurrentEpoch,\r\n  useGetHistoryByAccount,\r\n  useGetHistoryFilter,\r\n  useGetIsFetchingHistory,\r\n  useIsHistoryPaneOpen,\r\n} from 'state/hooks'\r\nimport { Header, HistoryTabs } from './components/History'\r\nimport RoundsTab from './components/History/RoundsTab'\r\nimport PnlTab from './components/History/PnlTab/PnlTab'\r\n\r\nconst StyledHistory = styled.div`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`\r\n\r\nconst BetWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  position: relative;\r\n`\r\n\r\nconst SpinnerWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst History = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const historyFilter = useGetHistoryFilter()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const { t } = useTranslation()\r\n  const bets = useGetHistoryByAccount(account)\r\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\r\n\r\n  useEffect(() => {\r\n    if (account && isHistoryPaneOpen) {\r\n      dispatch(fetchHistory({ account }))\r\n    }\r\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\r\n\r\n  // Currently the api cannot filter by unclaimed AND won so we do it here\r\n  // when the user has selected Uncollected only include positions they won\r\n  const results = historyFilter === HistoryFilter.UNCOLLECTED ? getUnclaimedWinningBets(bets) : bets\r\n\r\n  const hasBetHistory = results && results.length > 0\r\n\r\n  let activeTabComponent = null\r\n\r\n  switch (activeTab) {\r\n    case HistoryTabs.PNL:\r\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n    case HistoryTabs.ROUNDS:\r\n    default:\r\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n  }\r\n\r\n  if (!account) {\r\n    activeTabComponent = (\r\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\r\n        <UnlockButton />\r\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledHistory>\r\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\r\n      <BetWrapper>\r\n        {isFetchingHistory ? (\r\n          <SpinnerWrapper>\r\n            <Spinner size={72} />\r\n          </SpinnerWrapper>\r\n        ) : (\r\n          activeTabComponent\r\n        )}\r\n      </BetWrapper>\r\n    </StyledHistory>\r\n  )\r\n}\r\n\r\nexport default History\r\n","import React from 'react'\r\nimport { useTheme } from 'styled-components'\r\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\r\n\r\ninterface MultiplierProps extends SvgProps {\r\n  isActive: boolean\r\n}\r\n\r\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1.03125\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { CheckmarkCircleIcon, Tag, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb } from '../../helpers'\r\n\r\ninterface EnteredTagProps {\r\n  amount?: number\r\n}\r\n\r\nconst StyledEnteredTag = styled(Tag).attrs({\r\n  variant: 'secondary',\r\n  startIcon: <CheckmarkCircleIcon width=\"18px\" />,\r\n})`\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n`\r\n\r\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount }) => {\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(amount)} BNB`}</div>,\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <span ref={targetRef}>\r\n        <StyledEnteredTag>{t('Entered')}</StyledEnteredTag>{' '}\r\n      </span>{' '}\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EnteredTag\r\n","import React from 'react'\r\nimport styled, { CSSProperties } from 'styled-components'\r\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition } from 'state/types'\r\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\r\nimport EnteredTag from './EnteredTag'\r\n\r\ninterface MultiplierArrowProps {\r\n  betAmount?: number\r\n  multiplier?: number\r\n  hasEntered?: boolean\r\n  betPosition?: BetPosition\r\n  isDisabled?: boolean\r\n  isActive?: boolean\r\n}\r\n\r\nconst ArrowWrapper = styled.div`\r\n  height: 65px;\r\n  margin: 0 auto;\r\n  width: 240px;\r\n`\r\n\r\nconst Content = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst EnteredTagWrapper = styled.div`\r\n  position: absolute;\r\n  z-index: 10;\r\n`\r\n\r\nconst getTextColor =\r\n  (fallback = 'textSubtle') =>\r\n  (isActive: boolean, isDisabled: boolean) => {\r\n    if (isDisabled) {\r\n      return 'textDisabled'\r\n    }\r\n\r\n    if (isActive) {\r\n      return 'white'\r\n    }\r\n\r\n    return fallback\r\n  }\r\n\r\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\r\n  betAmount,\r\n  multiplier,\r\n  hasEntered = false,\r\n  betPosition = BetPosition.BULL,\r\n  isDisabled = false,\r\n  isActive = false,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const upColor = getTextColor('success')(isActive, isDisabled)\r\n  const downColor = getTextColor('failure')(isActive, isDisabled)\r\n  const textColor = getTextColor()(isActive, isDisabled)\r\n  const multiplierText = (\r\n    <Box>\r\n      <Flex justifyContent=\"center\" height=\"14px\">\r\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\r\n          {multiplier !== undefined ? `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x` : '-'}\r\n        </Text>\r\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\r\n          {t('Payout')}\r\n        </Text>\r\n      </Flex>\r\n    </Box>\r\n  )\r\n\r\n  const getEnteredTag = (position: CSSProperties) => {\r\n    if (!hasEntered) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <EnteredTagWrapper style={position}>\r\n        <EnteredTag amount={betAmount} />\r\n      </EnteredTagWrapper>\r\n    )\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return (\r\n      <Box position=\"relative\">\r\n        <ArrowWrapper>\r\n          <RoundMultiplierDownArrow isActive={isActive} />\r\n          {getEnteredTag({ bottom: 0, right: 0 })}\r\n          <Content>\r\n            {!isDisabled && multiplierText}\r\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\r\n              {t('Down')}\r\n            </Text>\r\n          </Content>\r\n        </ArrowWrapper>\r\n      </Box>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <ArrowWrapper>\r\n        <RoundMultiplierUpArrow isActive={isActive} />\r\n        {getEnteredTag({ top: 0, left: 0 })}\r\n        <Content>\r\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\r\n            {t('Up')}\r\n          </Text>\r\n          {!isDisabled && multiplierText}\r\n        </Content>\r\n      </ArrowWrapper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MultiplierArrow\r\n","import styled from 'styled-components'\r\nimport { Card as UIKitCard } from '@pancakeswap/uikit'\r\n\r\nconst Card = styled(UIKitCard)`\r\n  border-radius: 16px;\r\n`\r\n\r\nexport default Card\r\n","import React, { ReactElement } from 'react'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\n\r\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\r\n\r\ninterface CardHeaderProps {\r\n  status: Status\r\n  title: string\r\n  epoch: number\r\n  blockNumber: number\r\n  icon?: ReactElement\r\n}\r\n\r\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\r\n  switch (status) {\r\n    case 'calculating':\r\n      return theme.colors.gradients.cardHeader\r\n    case 'live':\r\n      return 'transparent'\r\n    case 'canceled':\r\n      return theme.colors.warning\r\n    case 'next':\r\n      return theme.colors.secondary\r\n    case 'expired':\r\n    case 'soon':\r\n    default:\r\n      return theme.colors.cardBorder\r\n  }\r\n}\r\n\r\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\r\ntype FallbackColor = 'text' | 'textSubtle'\r\n\r\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\r\n  switch (status) {\r\n    case 'expired':\r\n      return 'textDisabled'\r\n    case 'next':\r\n      return 'white'\r\n    case 'live':\r\n      return 'secondary'\r\n    case 'canceled':\r\n    case 'calculating':\r\n      return 'text'\r\n    default:\r\n      return fallback\r\n  }\r\n}\r\n\r\nconst StyledCardHeader = styled.div<{ status: Status }>`\r\n  align-items: center;\r\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\r\n  border-radius: 16px 16px 0 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\r\n`\r\n\r\nconst Round = styled.div`\r\n  justify-self: center;\r\n`\r\n\r\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\r\n  const textColor = getTextColorByStatus(status, 'text')\r\n  const isLive = status === 'live'\r\n\r\n  return (\r\n    <StyledCardHeader status={status}>\r\n      <Flex alignItems=\"center\">\r\n        {icon}\r\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\r\n          {title}\r\n        </Text>\r\n      </Flex>\r\n      <Round>\r\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\r\n          {`#${epoch}`}\r\n        </Text>\r\n      </Round>\r\n    </StyledCardHeader>\r\n  )\r\n}\r\n\r\nexport default CardHeader\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { useBetCanClaim } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\n\r\ninterface CollectWinningsOverlayProps {\r\n  roundId: string\r\n  epoch: number\r\n  payout: number\r\n  isBottom?: boolean\r\n}\r\n\r\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  left: 0;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 30;\r\n\r\n  ${({ isBottom }) => {\r\n    return isBottom\r\n      ? `\r\n      border-radius: 0 0 16px 16px;\r\n      bottom: 0;\r\n    `\r\n      : `\r\n      top: 37px; // Card header height\r\n    `\r\n  }}\r\n`\r\n\r\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\r\n  roundId,\r\n  epoch,\r\n  payout,\r\n  isBottom = false,\r\n  ...props\r\n}) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const canClaim = useBetCanClaim(account, roundId)\r\n\r\n  if (!canClaim) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\r\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n      <CollectWinningsButton payout={payout} roundId={roundId} epoch={epoch} hasClaimed={false} width=\"100%\">\r\n        {t('Collect Winnings')}\r\n      </CollectWinningsButton>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsOverlay\r\n","import React from 'react'\r\nimport { CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Round, BetPosition } from 'state/types'\r\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface CanceledRoundCardProps {\r\n  round: Round\r\n}\r\n\r\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\r\n  const { epoch, startBlock } = round\r\n  const estimatedEndBlock = startBlock + interval\r\n\r\n  const handleSuccess = async () => {\r\n    setIsRefundable(false)\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        status=\"canceled\"\r\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Canceled')}\r\n        epoch={round.epoch}\r\n        blockNumber={estimatedEndBlock}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Flex flexDirection=\"column\" alignItems=\"center\">\r\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\r\n              {t('Round Canceled')}\r\n            </Text>\r\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\r\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\r\n              {t('Learn More')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CanceledRoundCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Round, BetPosition } from 'state/types'\r\nimport { useGetBetByRoundId } from 'state/hooks'\r\nimport { RoundResult } from '../RoundResult'\r\nimport { getPayout } from '../../helpers'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\r\nimport CanceledRoundCard from './CanceledRoundCard'\r\n\r\ninterface ExpiredRoundCardProps {\r\n  round: Round\r\n  betAmount?: number\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: number\r\n  bearMultiplier: number\r\n}\r\n\r\nconst StyledExpiredRoundCard = styled(Card)`\r\n  opacity: 0.7;\r\n  transition: opacity 300ms;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { id, epoch, endBlock, lockPrice, closePrice } = round\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const bet = useGetBetByRoundId(account, round.id)\r\n  const payout = getPayout(bet)\r\n\r\n  if (round.failed) {\r\n    return <CanceledRoundCard round={round} />\r\n  }\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <StyledExpiredRoundCard>\r\n        <CardHeader\r\n          status=\"expired\"\r\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\r\n          title={t('Expired')}\r\n          blockNumber={endBlock}\r\n          epoch={round.epoch}\r\n        />\r\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bullMultiplier}\r\n            isActive={betPosition === BetPosition.BULL}\r\n            hasEntered={hasEnteredUp}\r\n          />\r\n          <RoundResult round={round} />\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            isActive={betPosition === BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n          />\r\n        </CardBody>\r\n      </StyledExpiredRoundCard>\r\n      <CollectWinningsOverlay roundId={id} epoch={epoch} payout={payout} isBottom={hasEnteredDown} />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default ExpiredRoundCard\r\n","import React from 'react'\r\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\r\nimport { useBlock } from 'state/hooks'\r\n\r\ninterface BlockProgressProps extends ProgressProps {\r\n  startBlock: number\r\n  endBlock: number\r\n}\r\n\r\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\r\n  const { currentBlock } = useBlock()\r\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\r\n  const progress = rawProgress <= 100 ? rawProgress : 100\r\n\r\n  return <Progress primaryStep={progress} {...props} />\r\n}\r\n\r\nexport default BlockProgress\r\n","import React from 'react'\r\nimport { CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Round, BetPosition } from 'state/types'\r\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface CalculatingCardProps {\r\n  round: Round\r\n}\r\n\r\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const estimatedEndBlock = round.startBlock + interval\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardHeader\r\n          status=\"calculating\"\r\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n          title={t('Calculating')}\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedEndBlock}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow isDisabled />\r\n          <RoundResultBox>\r\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n              <Spinner size={96} />\r\n              <Flex mt=\"8px\" ref={targetRef}>\r\n                <TooltipText>{t('Calculating')}</TooltipText>\r\n                <InfoIcon ml=\"4px\" />\r\n              </Flex>\r\n            </Flex>\r\n          </RoundResultBox>\r\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n        </CardBody>\r\n      </Card>\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CalculatingCard\r\n","import React, { useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useCountUp } from 'react-countup'\r\nimport { CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Round, BetPosition } from 'state/types'\r\nimport { useBlock, useGetIntervalBlocks, useGetLastOraclePrice } from 'state/hooks'\r\nimport BlockProgress from 'components/BlockProgress'\r\nimport { formatUsd, getBubbleGumBackground } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport CanceledRoundCard from './CanceledRoundCard'\r\nimport CalculatingCard from './CalculatingCard'\r\n\r\ninterface LiveRoundCardProps {\r\n  round: Round\r\n  betAmount?: number\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: number\r\n  bearMultiplier: number\r\n}\r\n\r\nconst GradientBorder = styled.div`\r\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\r\n  border-radius: 16px;\r\n  padding: 1px;\r\n`\r\n\r\nconst GradientCard = styled(Card)`\r\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\r\n`\r\n\r\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { lockPrice, lockBlock, totalAmount } = round\r\n  const { currentBlock } = useBlock()\r\n  const totalInterval = useGetIntervalBlocks()\r\n  const price = useGetLastOraclePrice()\r\n  const isBull = price.gt(lockPrice)\r\n  const priceColor = isBull ? 'success' : 'failure'\r\n  const estimatedEndBlock = lockBlock + totalInterval\r\n  const priceDifference = price.minus(lockPrice).toNumber()\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: price.toNumber(),\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  useEffect(() => {\r\n    update(price.toNumber())\r\n  }, [price, update])\r\n\r\n  if (round.failed) {\r\n    return <CanceledRoundCard round={round} />\r\n  }\r\n\r\n  if (currentBlock > estimatedEndBlock) {\r\n    return <CalculatingCard round={round} />\r\n  }\r\n\r\n  return (\r\n    <GradientBorder>\r\n      <GradientCard>\r\n        <CardHeader\r\n          status=\"live\"\r\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\r\n          title={t('Live')}\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedEndBlock}\r\n        />\r\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlock} />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bullMultiplier}\r\n            hasEntered={hasEnteredUp}\r\n            isActive={isBull}\r\n          />\r\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n              {t('Last Price')}\r\n            </Text>\r\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\r\n              <div ref={targetRef}>\r\n                <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\r\n                  {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\r\n                </TooltipText>\r\n              </div>\r\n              <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n                {formatUsd(priceDifference)}\r\n              </PositionTag>\r\n            </Flex>\r\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n            <PrizePoolRow totalAmount={totalAmount} />\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n            isActive={!isBull}\r\n          />\r\n        </CardBody>\r\n      </GradientCard>\r\n      {tooltipVisible && tooltip}\r\n    </GradientBorder>\r\n  )\r\n}\r\n\r\nexport default LiveRoundCard\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface CardFlipProps {\r\n  isFlipped: boolean\r\n  height: string\r\n  children: [ReactNode, ReactNode]\r\n}\r\n\r\nconst Front = styled.div`\r\n  align-items: center;\r\n  backface-visibility: hidden;\r\n  display: flex;\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  transition: z-index 600ms;\r\n  width: 100%;\r\n\r\n  & > div {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nconst Back = styled(Front)`\r\n  transform: rotateY(180deg);\r\n`\r\n\r\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\r\n  height: 100%;\r\n  position: relative;\r\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\r\n  transform-style: preserve-3d;\r\n  transition: transform 600ms;\r\n\r\n  ${Front} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\r\n  }\r\n\r\n  ${Back} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\r\n  }\r\n`\r\n\r\nconst StyledCardFlip = styled.div`\r\n  perspective: 1000px;\r\n  z-index: auto;\r\n`\r\n\r\nconst getComponents = (children: CardFlipProps['children']) => {\r\n  if (children.length !== 2) {\r\n    throw new Error('CardFlip: Two children are required')\r\n  }\r\n\r\n  return children\r\n}\r\n\r\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\r\n  const [front, back] = getComponents(children)\r\n\r\n  return (\r\n    <StyledCardFlip style={{ height }}>\r\n      <Inner isFlipped={isFlipped}>\r\n        <Front>{front}</Front>\r\n        <Back>{back}</Back>\r\n      </Inner>\r\n    </StyledCardFlip>\r\n  )\r\n}\r\n\r\nexport default CardFlip\r\n","import { useContext } from 'react'\r\nimport { SwiperContext } from '../context/SwiperProvider'\r\n\r\nconst useSwiper = () => {\r\n  const swiperContext = useContext(SwiperContext)\r\n\r\n  if (swiperContext === undefined) {\r\n    throw new Error('Swiper not found')\r\n  }\r\n\r\n  return swiperContext\r\n}\r\n\r\nexport default useSwiper\r\n","import styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\n\r\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\r\n  flex: 1;\r\n`\r\n\r\nexport default FlexRow\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport {\r\n  ArrowBackIcon,\r\n  CardBody,\r\n  CardHeader,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  Button,\r\n  BinanceIcon,\r\n  Text,\r\n  BalanceInput,\r\n  Slider,\r\n  Box,\r\n  AutoRenewIcon,\r\n} from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetMinBetAmount } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { BetPosition } from 'state/types'\r\nimport { getDecimalAmount } from 'utils/formatBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber'\r\nimport PositionTag from '../PositionTag'\r\nimport { getBnbAmount } from '../../helpers'\r\nimport useSwiper from '../../hooks/useSwiper'\r\nimport FlexRow from '../FlexRow'\r\nimport Card from './Card'\r\n\r\ninterface SetPositionCardProps {\r\n  position: BetPosition\r\n  togglePosition: () => void\r\n  onBack: () => void\r\n  onSuccess: (decimalValue: BigNumber, hash: string) => Promise<void>\r\n}\r\n\r\n// /!\\ TEMPORARY /!\\\r\n// Set default gasPrice (6 gwei) when calling BetBull/BetBear before new contract is released fixing this 'issue'.\r\n// TODO: Remove on beta-v2 smart contract release.\r\nconst gasPrice = new BigNumber(6).times(BIG_TEN.pow(BIG_NINE)).toString()\r\n\r\nconst dust = new BigNumber(0.01).times(DEFAULT_TOKEN_DECIMAL)\r\nconst percentShortcuts = [10, 25, 50, 75]\r\n\r\nconst getButtonProps = (value: BigNumber, bnbBalance: BigNumber, minBetAmountBalance: BigNumber) => {\r\n  const hasSufficientBalance = () => {\r\n    if (value.gt(0)) {\r\n      return value.lte(bnbBalance)\r\n    }\r\n    return bnbBalance.gt(0)\r\n  }\r\n\r\n  if (!hasSufficientBalance()) {\r\n    return { key: 'Insufficient BNB balance', disabled: true }\r\n  }\r\n\r\n  if (value.eq(0) || value.isNaN()) {\r\n    return { key: 'Enter an amount', disabled: true }\r\n  }\r\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\r\n}\r\n\r\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\r\n  const [value, setValue] = useState('')\r\n  const [isTxPending, setIsTxPending] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const { account } = useWeb3React()\r\n  const { swiper } = useSwiper()\r\n  const { balance: bnbBalance } = useGetBnbBalance()\r\n  const minBetAmount = useGetMinBetAmount()\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const predictionsContract = usePredictionsContract()\r\n\r\n  const balanceDisplay = useMemo(() => {\r\n    return getBnbAmount(bnbBalance).toString()\r\n  }, [bnbBalance])\r\n  const maxBalance = useMemo(() => {\r\n    return getBnbAmount(bnbBalance.gt(dust) ? bnbBalance.minus(dust) : bnbBalance)\r\n  }, [bnbBalance])\r\n  const minBetAmountBalance = useMemo(() => {\r\n    return getBnbAmount(minBetAmount)\r\n  }, [minBetAmount])\r\n\r\n  const valueAsBn = new BigNumber(value)\r\n\r\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\r\n\r\n  const [percent, setPercent] = useState(0)\r\n\r\n  const handleInputChange = (input: string) => {\r\n    if (input) {\r\n      const percentage = Math.floor(new BigNumber(input).dividedBy(maxBalance).multipliedBy(100).toNumber())\r\n      setPercent(Math.min(percentage, 100))\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setValue(input)\r\n  }\r\n\r\n  const handlePercentChange = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = maxBalance.dividedBy(100).multipliedBy(sliderPercent)\r\n      setValue(percentageOfStakingMax.toFormat(18))\r\n    } else {\r\n      setValue('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  // Clear value\r\n  const handleGoBack = () => {\r\n    setValue('')\r\n    setPercent(0)\r\n    onBack()\r\n  }\r\n\r\n  // Disable the swiper events to avoid conflicts\r\n  const handleMouseOver = () => {\r\n    swiper.keyboard.disable()\r\n    swiper.mousewheel.disable()\r\n    swiper.detachEvents()\r\n  }\r\n\r\n  const handleMouseOut = () => {\r\n    swiper.keyboard.enable()\r\n    swiper.mousewheel.enable()\r\n    swiper.attachEvents()\r\n  }\r\n\r\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmountBalance)\r\n\r\n  const handleEnterPosition = () => {\r\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\r\n    const decimalValue = getDecimalAmount(valueAsBn)\r\n\r\n    predictionsContract.methods[betMethod]()\r\n      .send({ from: account, value: decimalValue, gasPrice })\r\n      .once('sending', () => {\r\n        setIsTxPending(true)\r\n      })\r\n      .once('receipt', async (result) => {\r\n        setIsTxPending(false)\r\n        onSuccess(decimalValue, result.transactionHash as string)\r\n      })\r\n      .once('error', (error) => {\r\n        const errorMsg = t('An error occurred, unable to enter your position')\r\n\r\n        toastError(t('Error'), error?.message)\r\n        setIsTxPending(false)\r\n        console.error(errorMsg, error)\r\n      })\r\n  }\r\n\r\n  // Warnings\r\n  useEffect(() => {\r\n    const bnValue = new BigNumber(value)\r\n    const hasSufficientBalance = bnValue.gt(0) && bnValue.lte(maxBalance)\r\n\r\n    if (!hasSufficientBalance) {\r\n      setErrorMessage({ key: 'Insufficient BNB balance' })\r\n    } else if (bnValue.gt(0) && bnValue.lt(minBetAmountBalance)) {\r\n      setErrorMessage({\r\n        key: 'A minimum amount of %num% %token% is required',\r\n        data: { num: minBetAmountBalance, token: 'BNB' },\r\n      })\r\n    } else {\r\n      setErrorMessage(null)\r\n    }\r\n  }, [value, maxBalance, minBetAmountBalance, setErrorMessage])\r\n\r\n  return (\r\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\r\n      <CardHeader p=\"16px\">\r\n        <Flex alignItems=\"center\">\r\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\r\n            <ArrowBackIcon width=\"24px\" />\r\n          </IconButton>\r\n          <FlexRow>\r\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\r\n          </FlexRow>\r\n          <PositionTag betPosition={position} onClick={togglePosition}>\r\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n      </CardHeader>\r\n      <CardBody py=\"16px\">\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text textAlign=\"right\" color=\"textSubtle\">\r\n            {t('Commit')}:\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <BinanceIcon mr=\"4px  \" />\r\n            <Text bold textTransform=\"uppercase\">\r\n              BNB\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n        <BalanceInput\r\n          value={value}\r\n          onUserInput={handleInputChange}\r\n          isWarning={showFieldWarning}\r\n          inputProps={{ disabled: !account || isTxPending }}\r\n        />\r\n        {showFieldWarning && (\r\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\r\n            {t(errorMessage.key, errorMessage.data)}\r\n          </Text>\r\n        )}\r\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\r\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\r\n        </Text>\r\n        <Slider\r\n          name=\"balance\"\r\n          min={0}\r\n          max={100}\r\n          value={percent}\r\n          onValueChanged={handlePercentChange}\r\n          valueLabel={account ? `${percent}%` : ''}\r\n          step={0.1}\r\n          disabled={!account || isTxPending}\r\n          mb=\"4px\"\r\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\r\n        />\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          {percentShortcuts.map((percentShortcut) => {\r\n            const handleClick = () => {\r\n              handlePercentChange(percentShortcut)\r\n            }\r\n\r\n            return (\r\n              <Button\r\n                key={percentShortcut}\r\n                scale=\"xs\"\r\n                variant=\"tertiary\"\r\n                onClick={handleClick}\r\n                disabled={!account || isTxPending}\r\n                style={{ flex: 1 }}\r\n              >\r\n                {`${percentShortcut}%`}\r\n              </Button>\r\n            )\r\n          })}\r\n          <Button\r\n            scale=\"xs\"\r\n            variant=\"tertiary\"\r\n            onClick={() => handlePercentChange(100)}\r\n            disabled={!account || isTxPending}\r\n          >\r\n            {t('Max')}\r\n          </Button>\r\n        </Flex>\r\n        <Box mb=\"8px\">\r\n          {account ? (\r\n            <Button\r\n              width=\"100%\"\r\n              disabled={!account || disabled}\r\n              onClick={handleEnterPosition}\r\n              isLoading={isTxPending}\r\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\r\n            >\r\n              {t(key)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" />\r\n          )}\r\n        </Box>\r\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\r\n          {t('You won’t be able to remove or change your position once you enter it.')}\r\n        </Text>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SetPositionCard\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { BetPosition, Round } from 'state/types'\r\nimport { useBlock, useGetIntervalBlocks } from 'state/hooks'\r\nimport { markPositionAsEntered } from 'state/predictions'\r\nimport useToast from 'hooks/useToast'\r\nimport CardFlip from '../CardFlip'\r\nimport { formatBnb, getBnbAmount } from '../../helpers'\r\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport SetPositionCard from './SetPositionCard'\r\n\r\ninterface OpenRoundCardProps {\r\n  round: Round\r\n  betAmount?: number\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: number\r\n  bearMultiplier: number\r\n}\r\n\r\ninterface State {\r\n  isSettingPosition: boolean\r\n  position: BetPosition\r\n}\r\n\r\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const [state, setState] = useState<State>({\r\n    isSettingPosition: false,\r\n    position: BetPosition.BULL,\r\n  })\r\n  const { t } = useTranslation()\r\n  const interval = useGetIntervalBlocks()\r\n  const { toastSuccess } = useToast()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { currentBlock } = useBlock()\r\n  const { isSettingPosition, position } = state\r\n  const isBufferPhase = currentBlock >= round.startBlock + interval\r\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(betAmount)} BNB`}</div>,\r\n    { placement: 'top' },\r\n  )\r\n\r\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\r\n  // to the start block\r\n  const estimatedLockBlock = round.startBlock + interval\r\n\r\n  const getCanEnterPosition = () => {\r\n    if (hasEnteredUp || hasEnteredDown) {\r\n      return false\r\n    }\r\n\r\n    if (round.lockPrice !== null) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  const canEnterPosition = getCanEnterPosition()\r\n\r\n  const handleBack = () =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: false,\r\n    }))\r\n\r\n  const handleSetPosition = (newPosition: BetPosition) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: true,\r\n      position: newPosition,\r\n    }))\r\n  }\r\n\r\n  const togglePosition = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\r\n    }))\r\n  }\r\n\r\n  const handleSuccess = async (decimalValue: BigNumber, hash: string) => {\r\n    // Optimistically set the user bet so we see the entered position immediately.\r\n    dispatch(\r\n      markPositionAsEntered({\r\n        account,\r\n        roundId: round.id,\r\n        bet: {\r\n          hash,\r\n          round,\r\n          position,\r\n          amount: getBnbAmount(decimalValue).toNumber(),\r\n          claimed: false,\r\n          claimedHash: null,\r\n        },\r\n      }),\r\n    )\r\n\r\n    handleBack()\r\n\r\n    toastSuccess(\r\n      t('Success!'),\r\n      t('%position% position entered', {\r\n        position: positionDisplay,\r\n      }),\r\n    )\r\n  }\r\n\r\n  const getPositionEnteredIcon = () => {\r\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\r\n  }\r\n\r\n  return (\r\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\r\n      <Card>\r\n        <CardHeader\r\n          status=\"next\"\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedLockBlock}\r\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\r\n          title={t('Next')}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\r\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\r\n            {canEnterPosition ? (\r\n              <>\r\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\r\n                <Button\r\n                  variant=\"success\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\r\n                  mb=\"4px\"\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter UP')}\r\n                </Button>\r\n                <Button\r\n                  variant=\"danger\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter DOWN')}\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div ref={targetRef}>\r\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\r\n                    {t('%position% Entered', { position: positionDisplay })}\r\n                  </Button>\r\n                </div>\r\n                <PrizePoolRow totalAmount={round.totalAmount} />\r\n                {tooltipVisible && tooltip}\r\n              </>\r\n            )}\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n      <SetPositionCard\r\n        onBack={handleBack}\r\n        onSuccess={handleSuccess}\r\n        position={position}\r\n        togglePosition={togglePosition}\r\n      />\r\n    </CardFlip>\r\n  )\r\n}\r\n\r\nexport default OpenRoundCard\r\n","import { useEffect, useRef, useState } from 'react'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport web3NoAccount from 'utils/web3'\r\n\r\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\r\nconst useBlockCountdown = (blockNumber: number) => {\r\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\r\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const startCountdown = async () => {\r\n      const currentBlock = await web3NoAccount.eth.getBlockNumber()\r\n\r\n      if (blockNumber > currentBlock) {\r\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\r\n\r\n        // Clear previous interval\r\n        if (timer.current) {\r\n          clearInterval(timer.current)\r\n        }\r\n\r\n        timer.current = setInterval(() => {\r\n          setSecondsRemaining((prevSecondsRemaining) => {\r\n            if (prevSecondsRemaining === 1) {\r\n              clearInterval(timer.current)\r\n            }\r\n\r\n            return prevSecondsRemaining - 1\r\n          })\r\n        }, 1000)\r\n      }\r\n    }\r\n\r\n    startCountdown()\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n    }\r\n  }, [setSecondsRemaining, blockNumber, timer])\r\n\r\n  return secondsRemaining\r\n}\r\n\r\nexport default useBlockCountdown\r\n","import { useGetCurrentRoundBlockNumber, useGetIntervalBlocks } from 'state/hooks'\r\nimport useBlockCountdown from 'hooks/useGetBlockCountdown'\r\n\r\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\r\nconst useRoundCountdown = (intervalsToAdd = 1) => {\r\n  const interval = useGetIntervalBlocks()\r\n  const currentRoundBlockNum = useGetCurrentRoundBlockNumber()\r\n  const blocksToAdd = intervalsToAdd * interval\r\n  const seconds = useBlockCountdown(currentRoundBlockNum + blocksToAdd)\r\n\r\n  return seconds\r\n}\r\n\r\nexport default useRoundCountdown\r\n","import React from 'react'\r\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Round, BetPosition } from 'state/types'\r\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport { formatRoundTime } from '../../helpers'\r\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface SoonRoundCardProps {\r\n  round: Round\r\n}\r\n\r\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const estimatedEndBlock = round.startBlock + interval\r\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\r\n  const countdown = formatRoundTime(seconds)\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        status=\"soon\"\r\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Later')}\r\n        epoch={round.epoch}\r\n        blockNumber={estimatedEndBlock}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Text textAlign=\"center\">\r\n            <Text bold>{t('Entry starts')}</Text>\r\n            <Text fontSize=\"24px\" bold>\r\n              {`~${countdown}`}\r\n            </Text>\r\n          </Text>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SoonRoundCard\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetBetByRoundId, useGetCurrentEpoch } from 'state/hooks'\r\nimport { BetPosition, Round } from 'state/types'\r\nimport { getMultiplier } from '../../helpers'\r\nimport ExpiredRoundCard from './ExpiredRoundCard'\r\nimport LiveRoundCard from './LiveRoundCard'\r\nimport OpenRoundCard from './OpenRoundCard'\r\nimport SoonRoundCard from './SoonRoundCard'\r\n\r\ninterface RoundCardProps {\r\n  round: Round\r\n}\r\n\r\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\r\n  const { id, epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const { account } = useWeb3React()\r\n  const bet = useGetBetByRoundId(account, id)\r\n  const hasEntered = bet !== null\r\n  const hasEnteredUp = hasEntered && bet.position === BetPosition.BULL\r\n  const hasEnteredDown = hasEntered && bet.position === BetPosition.BEAR\r\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\r\n\r\n  // Next (open) round\r\n  if (epoch === currentEpoch && lockPrice === null) {\r\n    return (\r\n      <OpenRoundCard\r\n        round={round}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        betAmount={bet?.amount}\r\n        bullMultiplier={bullMultiplier}\r\n        bearMultiplier={bearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Live round\r\n  if (closePrice === null && epoch === currentEpoch - 1) {\r\n    return (\r\n      <LiveRoundCard\r\n        betAmount={bet?.amount}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        round={round}\r\n        bullMultiplier={bullMultiplier}\r\n        bearMultiplier={bearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Fake future rounds\r\n  if (epoch > currentEpoch) {\r\n    return <SoonRoundCard round={round} />\r\n  }\r\n\r\n  // Past rounds\r\n  return (\r\n    <ExpiredRoundCard\r\n      round={round}\r\n      hasEnteredDown={hasEnteredDown}\r\n      hasEnteredUp={hasEnteredUp}\r\n      betAmount={bet?.amount}\r\n      bullMultiplier={bullMultiplier}\r\n      bearMultiplier={bearMultiplier}\r\n    />\r\n  )\r\n}\r\n\r\nexport default RoundCard\r\n","import React, { useEffect } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport styled from 'styled-components'\r\nimport { BnbUsdtPairTokenIcon, Box, Card, PocketWatchIcon, Text } from '@pancakeswap/uikit'\r\nimport { useGetLastOraclePrice } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatRoundTime } from '../helpers'\r\nimport useRoundCountdown from '../hooks/useRoundCountdown'\r\n\r\nconst Token = styled(Box)`\r\n  margin-top: -24px;\r\n  position: absolute;\r\n  top: 50%;\r\n  z-index: 30;\r\n\r\n  & > svg {\r\n    height: 48px;\r\n    width: 48px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-top: -32px;\r\n\r\n    & > svg {\r\n      height: 64px;\r\n      width: 64px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Title = styled(Text)`\r\n  font-size: 16px;\r\n  line-height: 21px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 20px;\r\n    line-height: 22px;\r\n  }\r\n`\r\n\r\nconst Price = styled(Text)`\r\n  height: 18px;\r\n  justify-self: start;\r\n  width: 60px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n  }\r\n`\r\n\r\nconst Interval = styled(Text)`\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n    width: 32px;\r\n  }\r\n`\r\n\r\nconst Label = styled(Card)<{ dir: 'left' | 'right' }>`\r\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\r\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: initial;\r\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    align-items: center;\r\n    border-radius: 16px;\r\n    flex-direction: row;\r\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\r\n  }\r\n`\r\n\r\nexport const PricePairLabel: React.FC = () => {\r\n  const price = useGetLastOraclePrice()\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: price.toNumber(),\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n\r\n  useEffect(() => {\r\n    update(price.toNumber())\r\n  }, [price, update])\r\n\r\n  return (\r\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\r\n      <Token left={0}>\r\n        <BnbUsdtPairTokenIcon />\r\n      </Token>\r\n      <Label dir=\"left\">\r\n        <Title bold textTransform=\"uppercase\">\r\n          BNBUSDT\r\n        </Title>\r\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\r\n      </Label>\r\n    </Box>\r\n  )\r\n}\r\n\r\ninterface TimerLabelProps {\r\n  interval: string\r\n  unit: 'm' | 'h' | 'd'\r\n}\r\n\r\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\r\n  const seconds = useRoundCountdown()\r\n  const countdown = formatRoundTime(seconds)\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Box pr=\"24px\" position=\"relative\">\r\n      <Label dir=\"right\">\r\n        <Title bold color=\"secondary\">\r\n          {seconds === 0 ? t('Closing') : countdown}\r\n        </Title>\r\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\r\n      </Label>\r\n      <Token right={0}>\r\n        <PocketWatchIcon />\r\n      </Token>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Card, IconButton } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst StyledPrevNextNav = styled(Card)`\r\n  align-items: center;\r\n  display: none;\r\n  justify-content: space-between;\r\n  overflow: initial;\r\n  position: relative;\r\n  width: 128px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst Icon = styled.div`\r\n  cursor: pointer;\r\n  left: 50%;\r\n  margin-left: -32px;\r\n  position: absolute;\r\n`\r\n\r\nconst PrevNextNav = () => {\r\n  const { swiper } = useSwiper()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n\r\n  const handlePrevSlide = () => {\r\n    swiper.slidePrev()\r\n  }\r\n\r\n  const handleNextSlide = () => {\r\n    swiper.slideNext()\r\n  }\r\n\r\n  const handleSlideToLive = () => {\r\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n    swiper.slideTo(currentEpochIndex - 1)\r\n    swiper.update()\r\n  }\r\n\r\n  return (\r\n    <StyledPrevNextNav>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\r\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n      <Icon onClick={handleSlideToLive}>\r\n        <BunnyCardsIcon width=\"64px\" />\r\n      </Icon>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\r\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n    </StyledPrevNextNav>\r\n  )\r\n}\r\n\r\nexport default PrevNextNav\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport { useGetIsFetchingHistory } from 'state/hooks'\r\n\r\nconst HistoryButton = () => {\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\r\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default HistoryButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, HelpIcon, IconButton } from '@pancakeswap/uikit'\r\nimport FlexRow from './FlexRow'\r\nimport { PricePairLabel, TimerLabel } from './Label'\r\nimport PrevNextNav from './PrevNextNav'\r\nimport HistoryButton from './HistoryButton'\r\n\r\nconst SetCol = styled.div`\r\n  flex: none;\r\n  width: auto;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    width: 270px;\r\n  }\r\n`\r\n\r\nconst HelpButtonWrapper = styled.div`\r\n  order: 1;\r\n  margin: 0 8px 0 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 2;\r\n    margin: 0 0 0 8px;\r\n  }\r\n`\r\n\r\nconst TimerLabelWrapper = styled.div`\r\n  order: 2;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 1;\r\n  }\r\n`\r\n\r\nconst HistoryButtonWrapper = styled.div`\r\n  display: none;\r\n  order: 3;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: initial;\r\n  }\r\n`\r\n\r\nconst Menu = () => {\r\n  return (\r\n    <FlexRow alignItems=\"center\" p=\"16px\">\r\n      <SetCol>\r\n        <PricePairLabel />\r\n      </SetCol>\r\n      <FlexRow justifyContent=\"center\">\r\n        <PrevNextNav />\r\n      </FlexRow>\r\n      <SetCol>\r\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n          <TimerLabelWrapper>\r\n            <TimerLabel interval=\"5\" unit=\"m\" />\r\n          </TimerLabelWrapper>\r\n          <HelpButtonWrapper>\r\n            <IconButton\r\n              variant=\"subtle\"\r\n              as=\"a\"\r\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer noopener\"\r\n            >\r\n              <HelpIcon width=\"24px\" color=\"white\" />\r\n            </IconButton>\r\n          </HelpButtonWrapper>\r\n          <HistoryButtonWrapper>\r\n            <HistoryButton />\r\n          </HistoryButtonWrapper>\r\n        </Flex>\r\n      </SetCol>\r\n    </FlexRow>\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\r\nimport { fetchCurrentBets } from 'state/predictions'\r\nimport useSwiper from './useSwiper'\r\n\r\n/**\r\n * Hooks for actions to be performed when the round changes\r\n */\r\nconst useOnNextRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n  const { account } = useWeb3React()\r\n  const previousEpoch = usePreviousValue(currentEpoch)\r\n  const { swiper } = useSwiper()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\r\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n      // Fetch data on current unclaimed bets\r\n      dispatch(fetchCurrentBets({ account, roundIds: rounds.map((round) => round.id) }))\r\n\r\n      // Slide to the current LIVE round which is always the one before the current round\r\n      swiper.slideTo(currentEpochIndex - 1)\r\n      swiper.update()\r\n    }\r\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\r\n}\r\n\r\nexport default useOnNextRound\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { useGetSortedRounds } from 'state/hooks'\r\nimport 'swiper/swiper.min.css'\r\nimport RoundCard from './components/RoundCard'\r\nimport Menu from './components/Menu'\r\nimport useSwiper from './hooks/useSwiper'\r\nimport useOnNextRound from './hooks/useOnNextRound'\r\n\r\nSwiperCore.use([Keyboard, Mousewheel])\r\n\r\nconst StyledSwiper = styled.div`\r\n  .swiper-wrapper {\r\n    align-items: center;\r\n    display: flex;\r\n  }\r\n\r\n  .swiper-slide {\r\n    width: 320px;\r\n  }\r\n`\r\nconst Positions: React.FC = () => {\r\n  const { setSwiper } = useSwiper()\r\n  const rounds = useGetSortedRounds()\r\n  const initialIndex = Math.floor(rounds.length / 2)\r\n\r\n  useOnNextRound()\r\n\r\n  return (\r\n    <Box overflow=\"hidden\">\r\n      <Menu />\r\n      <StyledSwiper>\r\n        <Swiper\r\n          initialSlide={initialIndex}\r\n          onSwiper={setSwiper}\r\n          spaceBetween={16}\r\n          slidesPerView=\"auto\"\r\n          freeMode\r\n          freeModeSticky\r\n          centeredSlides\r\n          freeModeMomentumRatio={0.25}\r\n          freeModeMomentumVelocityRatio={0.5}\r\n          mousewheel\r\n          keyboard\r\n          resizeObserver\r\n        >\r\n          {rounds.map((round) => (\r\n            <SwiperSlide key={round.id}>\r\n              <RoundCard round={round} />\r\n            </SwiperSlide>\r\n          ))}\r\n        </Swiper>\r\n      </StyledSwiper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Positions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex } from '@pancakeswap/uikit'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { PredictionStatus } from 'state/types'\r\nimport MobileMenu from './components/MobileMenu'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\nimport Chart from './Chart'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\n\r\nenum PageView {\r\n  POSITIONS = 'positions',\r\n  HISTORY = 'history',\r\n  CHART = 'chart',\r\n}\r\n\r\nconst StyledMobile = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  max-height: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst View = styled.div<{ isVisible: boolean }>`\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\r\n`\r\n\r\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\r\n  if (isHistoryPaneOpen) {\r\n    return PageView.HISTORY\r\n  }\r\n\r\n  if (isChartPaneOpen) {\r\n    return PageView.CHART\r\n  }\r\n\r\n  return PageView.POSITIONS\r\n}\r\n\r\nconst Mobile: React.FC = () => {\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\r\n  const status = useGetPredictionsStatus()\r\n\r\n  return (\r\n    <StyledMobile>\r\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\r\n        <View isVisible={view === PageView.POSITIONS}>\r\n          <Flex alignItems=\"center\" height=\"100%\">\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && <Positions />}\r\n          </Flex>\r\n        </View>\r\n        <View isVisible={view === PageView.CHART}>\r\n          <Chart />\r\n        </View>\r\n        <View isVisible={view === PageView.HISTORY}>\r\n          <History />\r\n        </View>\r\n      </Box>\r\n      <MobileMenu />\r\n    </StyledMobile>\r\n  )\r\n}\r\n\r\nexport default Mobile\r\n","import React, { useEffect, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport Split from 'split-grid'\r\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\r\nimport debounce from 'lodash/debounce'\r\nimport delay from 'lodash/delay'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { setChartPaneState } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TradingView from './components/TradingView'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\n\r\n// The value to set the chart when the user clicks the chart tab at the bottom\r\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\r\n\r\nconst ExpandChartButton = styled(Button)`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom-left-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  bottom: 12px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: none;\r\n  left: 32px;\r\n  position: absolute;\r\n  z-index: 50;\r\n\r\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\r\n    background-color: ${({ theme }) => theme.card.background};\r\n    opacity: 1;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: inline-flex;\r\n  }\r\n`\r\n\r\nconst SplitWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: 1fr 12px 0;\r\n  flex: 1;\r\n  overflow: hidden;\r\n`\r\n\r\nconst ChartPane = styled.div`\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\r\n  flex: none;\r\n  overflow: hidden;\r\n  transition: width 200ms ease-in-out;\r\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\r\n`\r\n\r\nconst StyledDesktop = styled.div`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n    height: 100%;\r\n  }\r\n`\r\n\r\nconst PositionPane = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  max-width: 100%;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n\r\n  & > div {\r\n    flex: 1;\r\n    overflow: hidden;\r\n  }\r\n`\r\n\r\nconst Gutter = styled.div`\r\n  background: ${({ theme }) => theme.colors.dropdown};\r\n  cursor: row-resize;\r\n  height: 12px;\r\n  position: relative;\r\n\r\n  &:before {\r\n    background-color: ${({ theme }) => theme.colors.textSubtle};\r\n    border-radius: 8px;\r\n    content: '';\r\n    height: 4px;\r\n    left: 50%;\r\n    margin-left: -32px;\r\n    position: absolute;\r\n    top: 4px;\r\n    width: 64px;\r\n  }\r\n`\r\n\r\nconst Desktop: React.FC = () => {\r\n  const splitWrapperRef = useRef<HTMLDivElement>()\r\n  const chartRef = useRef<HTMLDivElement>()\r\n  const gutterRef = useRef<HTMLDivElement>()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  const toggleChartPane = () => {\r\n    const newChartPaneState = !isChartPaneOpen\r\n\r\n    if (newChartPaneState) {\r\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\r\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\r\n\r\n      // Purely comedic: We only want to animate if we are clicking the open chart button\r\n      // If we keep the transition on the resizing becomes very choppy\r\n      delay(() => {\r\n        splitWrapperRef.current.style.transition = ''\r\n      }, 150)\r\n    }\r\n\r\n    dispatch(setChartPaneState(newChartPaneState))\r\n  }\r\n\r\n  useEffect(() => {\r\n    const threshold = 100\r\n    const handleDrag = debounce(() => {\r\n      const { height } = chartRef.current.getBoundingClientRect()\r\n\r\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\r\n      dispatch(setChartPaneState(height > threshold))\r\n    }, 50)\r\n\r\n    const split = Split({\r\n      dragInterval: 1,\r\n      snapOffset: threshold,\r\n      onDrag: handleDrag,\r\n      rowGutters: [\r\n        {\r\n          track: 1,\r\n          element: gutterRef.current,\r\n        },\r\n      ],\r\n    })\r\n\r\n    return () => {\r\n      split.destroy()\r\n    }\r\n  }, [gutterRef, chartRef, dispatch])\r\n\r\n  return (\r\n    <>\r\n      {!isChartPaneOpen && (\r\n        <ExpandChartButton\r\n          variant=\"tertiary\"\r\n          scale=\"sm\"\r\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\r\n          onClick={toggleChartPane}\r\n        >\r\n          {isChartPaneOpen ? t('Close') : t('Charts')}\r\n        </ExpandChartButton>\r\n      )}\r\n      <StyledDesktop>\r\n        <SplitWrapper ref={splitWrapperRef}>\r\n          <PositionPane>\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && (\r\n              <div>\r\n                <Positions />\r\n              </div>\r\n            )}\r\n          </PositionPane>\r\n          <Gutter ref={gutterRef} />\r\n          <ChartPane ref={chartRef}>\r\n            <TradingView />\r\n          </ChartPane>\r\n        </SplitWrapper>\r\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\r\n          <History />\r\n        </HistoryPane>\r\n      </StyledDesktop>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Desktop\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowBackIcon,\r\n  ArrowForwardIcon,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  Cards,\r\n  ChartIcon,\r\n  HistoryIcon,\r\n  IconButton,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst ButtonNav = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst TabNav = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nconst StyledMobileMenu = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex: none;\r\n  height: 64px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\r\n  if (isHistoryOpen) {\r\n    return 2\r\n  }\r\n\r\n  if (isChartOpen) {\r\n    return 1\r\n  }\r\n\r\n  return 0\r\n}\r\n\r\nconst MobileMenu = () => {\r\n  const { swiper } = useSwiper()\r\n  const isHistoryOpen = useIsHistoryPaneOpen()\r\n  const isChartOpen = useIsChartPaneOpen()\r\n  const status = useGetPredictionsStatus()\r\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleItemClick = (index: number) => {\r\n    switch (index) {\r\n      case 2:\r\n        dispatch(setHistoryPaneState(true))\r\n        break\r\n      case 1:\r\n        dispatch(setChartPaneState(true))\r\n        dispatch(setHistoryPaneState(false))\r\n        break\r\n      case 0:\r\n      default:\r\n        dispatch(setHistoryPaneState(false))\r\n        dispatch(setChartPaneState(false))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledMobileMenu>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n      <TabNav>\r\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\r\n          <ButtonMenuItem>\r\n            <Cards color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem>\r\n            <ChartIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem disabled={!account}>\r\n            <HistoryIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </TabNav>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n    </StyledMobileMenu>\r\n  )\r\n}\r\n\r\nexport default MobileMenu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport Menu from './components/Menu'\r\nimport TradingView from './components/TradingView'\r\n\r\nconst MenuWrapper = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst ChartWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n`\r\n\r\nconst Chart = () => {\r\n  return (\r\n    <Flex flexDirection=\"column\" height=\"100%\">\r\n      <MenuWrapper>\r\n        <Menu />\r\n      </MenuWrapper>\r\n      <ChartWrapper>\r\n        <TradingView />\r\n      </ChartWrapper>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","import React, { useState } from 'react'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n  InjectedModalProps,\r\n  Checkbox,\r\n  ModalHeader,\r\n  ModalTitle,\r\n  Heading,\r\n  Box,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\n\r\ninterface RiskDisclaimerProps extends InjectedModalProps {\r\n  onSuccess: () => void\r\n}\r\n\r\nconst GradientModalHeader = styled(ModalHeader)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n`\r\n\r\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\r\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\r\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\r\n  const { t } = useTranslation()\r\n\r\n  const handleSetAcknowledgeRisk = () => {\r\n    setAcknowledgeRisk(!acknowledgeRisk)\r\n  }\r\n\r\n  const handleSetAcknowledgeBeta = () => {\r\n    setAcknowledgeBeta(!acknowledgeBeta)\r\n  }\r\n\r\n  const handleConfirm = () => {\r\n    onSuccess()\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\r\n      <GradientModalHeader>\r\n        <ModalTitle>\r\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\r\n        </ModalTitle>\r\n      </GradientModalHeader>\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\r\n          <Heading as=\"h3\" mb=\"24px\">\r\n            {t('This Product is in beta.')}\r\n          </Heading>\r\n\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\r\n          </Text>\r\n\r\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t(\r\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\r\n                )}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n        </Box>\r\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\r\n          {t('Continue')}\r\n        </Button>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default RiskDisclaimer\r\n","import React from 'react'\r\nimport { ModalContainer, ModalBody, Text, Button, InjectedModalProps, LinkExternal, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ChartDisclaimerProps extends InjectedModalProps {\r\n  onSuccess: () => void\r\n}\r\n\r\nconst ChartDisclaimer: React.FC<ChartDisclaimerProps> = ({ onSuccess, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const handleConfirm = () => {\r\n    onSuccess()\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Text as=\"p\" mb=\"16px\">\r\n          {t('Charts are provided for reference only and do not reflect rounds’ final outcome.')}\r\n        </Text>\r\n        <Text as=\"p\" mb=\"16px\">\r\n          {t('Please refer to the prices shown on the cards for the final outcome.')}\r\n        </Text>\r\n        <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\r\n          {t('I understand')}\r\n        </Button>\r\n        <Flex justifyContent=\"center\" alignItems=\"center\">\r\n          <LinkExternal\r\n            href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\r\n            external\r\n          >\r\n            {t('Learn More')}\r\n          </LinkExternal>\r\n        </Flex>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default ChartDisclaimer\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useInitialBlock, useIsChartPaneOpen } from 'state/hooks'\r\nimport {\r\n  getMarketData,\r\n  getStaticPredictionsData,\r\n  makeFutureRoundResponse,\r\n  makeRoundData,\r\n  transformRoundResponse,\r\n} from 'state/predictions/helpers'\r\nimport { fetchCurrentBets, initialize, setPredictionStatus } from 'state/predictions'\r\nimport { HistoryFilter, PredictionsState, PredictionStatus } from 'state/types'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport PageLoader from 'components/PageLoader'\r\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\r\nimport usePollRoundData from './hooks/usePollRoundData'\r\nimport Container from './components/Container'\r\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\r\nimport SwiperProvider from './context/SwiperProvider'\r\nimport Desktop from './Desktop'\r\nimport Mobile from './Mobile'\r\nimport RiskDisclaimer from './components/RiskDisclaimer'\r\nimport ChartDisclaimer from './components/ChartDisclaimer'\r\n\r\nconst FUTURE_ROUND_COUNT = 2 // the number of rounds in the future to show\r\n\r\nconst Predictions = () => {\r\n  const { isXl } = useMatchBreakpoints()\r\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\r\n    localStorageKey: 'pancake_predictions_accepted_risk',\r\n  })\r\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, {\r\n    localStorageKey: 'pancake_predictions_chart',\r\n  })\r\n  const { account } = useWeb3React()\r\n  const status = useGetPredictionsStatus()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const initialBlock = useInitialBlock()\r\n  const isDesktop = isXl\r\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\r\n  const handleAcceptChart = () => setHasAcceptedChart(true)\r\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\r\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer onSuccess={handleAcceptChart} />, false)\r\n\r\n  // TODO: memoize modal's handlers\r\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\r\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\r\n\r\n  // Disclaimer\r\n  useEffect(() => {\r\n    if (!hasAcceptedRisk) {\r\n      onPresentRiskDisclaimerRef.current()\r\n    }\r\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\r\n\r\n  // Chart Disclaimer\r\n  useEffect(() => {\r\n    if (!hasAcceptedChart && isChartPaneOpen) {\r\n      onPresentChartDisclaimerRef.current()\r\n    }\r\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen])\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      const [staticPredictionsData, marketData] = await Promise.all([getStaticPredictionsData(), getMarketData()])\r\n      const { currentEpoch, intervalBlocks, bufferBlocks } = staticPredictionsData\r\n      const latestRound = marketData.rounds.find((round) => round.epoch === currentEpoch)\r\n\r\n      // Fetch data on current unclaimed bets\r\n      dispatch(fetchCurrentBets({ account, roundIds: marketData.rounds.map((round) => round.id) }))\r\n\r\n      if (marketData.market.paused) {\r\n        dispatch(setPredictionStatus(PredictionStatus.PAUSED))\r\n      } else if (latestRound && latestRound.epoch === currentEpoch) {\r\n        const currentRoundStartBlock = Number(latestRound.startBlock)\r\n        const futureRounds = []\r\n        const halfInterval = (intervalBlocks + bufferBlocks) / 2\r\n\r\n        for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\r\n          futureRounds.push(makeFutureRoundResponse(currentEpoch + i, (currentRoundStartBlock + halfInterval) * i))\r\n        }\r\n\r\n        const roundData = makeRoundData([...marketData.rounds, ...futureRounds.map(transformRoundResponse)])\r\n\r\n        dispatch(\r\n          initialize({\r\n            ...(staticPredictionsData as Omit<PredictionsState, 'rounds'>),\r\n            historyFilter: HistoryFilter.ALL,\r\n            currentRoundStartBlockNumber: currentRoundStartBlock,\r\n            rounds: roundData,\r\n            history: {},\r\n            bets: {},\r\n          }),\r\n        )\r\n      } else {\r\n        // If the latest epoch from the API does not match the latest epoch from the contract we have an unrecoverable error\r\n        dispatch(setPredictionStatus(PredictionStatus.ERROR))\r\n      }\r\n    }\r\n\r\n    // Do not start initialization until the first block has been retrieved\r\n    if (initialBlock > 0) {\r\n      fetchInitialData()\r\n    }\r\n  }, [initialBlock, dispatch, account])\r\n\r\n  usePollRoundData()\r\n  usePollOraclePrice()\r\n\r\n  if (status === PredictionStatus.INITIAL) {\r\n    return <PageLoader />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\r\n      </Helmet>\r\n      <SwiperProvider>\r\n        <Container>\r\n          {isDesktop ? <Desktop /> : <Mobile />}\r\n          <CollectWinningsPopup />\r\n        </Container>\r\n      </SwiperProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Predictions\r\n"],"sourceRoot":""}