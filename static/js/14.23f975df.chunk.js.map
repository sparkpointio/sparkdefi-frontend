{"version":3,"sources":["views/Collectibles/components/InfoRow.tsx","views/Collectibles/components/TransferNftModal.tsx","views/Collectibles/components/ClaimNftModal.tsx","views/Collectibles/components/NftCard/Preview.tsx","views/Collectibles/components/NftCard/index.tsx","views/Collectibles/components/NftGrid.tsx","views/Collectibles/components/NftCard/BunnySpecialCard.tsx","views/Collectibles/components/NftCard/EasterNftCard.tsx","views/Collectibles/components/NftList.tsx","views/Collectibles/index.tsx"],"names":["InfoRow","styled","div","Value","Text","ModalContent","Actions","Label","label","theme","colors","text","TransferNftModal","nft","tokenIds","onSuccess","onDismiss","useState","isLoading","setIsLoading","value","setValue","error","setError","t","useTranslation","account","useWeb3React","contract","useERC721","getAddressByType","type","toastSuccess","useToast","handleConfirm","a","Web3","utils","isAddress","methods","transferFrom","send","from","on","console","title","color","mb","nftName","name","htmlFor","id","placeholder","onChange","evt","inputValue","target","isWarning","disabled","width","variant","onClick","ClaimNftModal","onClaim","isConfirming","setIsConfirming","toastError","once","alignItems","justifyContent","bold","endIcon","spin","Container","cardBorder","StyledImage","img","StyledVideo","video","Preview","isOwned","images","previewImageSrc","lg","videoComponent","autoPlay","controls","loop","muted","poster","src","webm","mp4","href","ipfs","rel","previewImage","alt","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","canClaim","refresh","isOpen","setIsOpen","profile","useProfile","identifier","description","walletOwnsNft","length","Icon","ChevronUpIcon","ChevronDownIcon","handleClick","handleSuccess","useModal","onPresentTransferModal","onPresentClaimModal","isActive","outline","mt","p","as","style","textAlign","NftGrid","mediaQueries","sm","md","BunnySpecialCard","props","isClaimable","setIsClaimable","bunnySpecialContract","useBunnySpecialContract","variationId","useEffect","canClaimSingle","call","fetchClaimStatus","mintNFT","teamNftMap","EasterNftCard","team","easterNftContract","useEasterNftContract","nftComponents","hiccup","bullish","NftList","useGetCollectibles","dispatch","useAppDispatch","handleRefresh","fetchWalletNfts","orderBy","nfts","map","Card","StyledHero","textSubtle","Collectibles","Page","scale"],"mappings":"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","file":"static/js/14.23f975df.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst InfoRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default InfoRow\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Input, Modal, Text } from '@pancakeswap/uikit'\r\nimport { getAddressByType } from 'utils/collectibles'\r\nimport { Nft } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { useERC721 } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface TransferNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  margin-top: 24px;\r\n`\r\n\r\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [value, setValue] = useState('')\r\n  const [error, setError] = useState(null)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const contract = useERC721(getAddressByType(nft.type))\r\n  const { toastSuccess } = useToast()\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = Web3.utils.isAddress(value)\r\n\r\n      if (!isValidAddress) {\r\n        setError(t('Please enter a valid wallet address'))\r\n      } else {\r\n        await contract.methods\r\n          .transferFrom(account, value, tokenIds[0])\r\n          .send({ from: account })\r\n          .on('sending', () => {\r\n            setIsLoading(true)\r\n          })\r\n          .on('receipt', () => {\r\n            onDismiss()\r\n            onSuccess()\r\n            toastSuccess(t('NFT successfully transferred!'))\r\n          })\r\n          .on('error', () => {\r\n            console.error(error)\r\n            setError(t('Unable to transfer NFT'))\r\n            setIsLoading(false)\r\n          })\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to transfer NFT:', err)\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue } = evt.target\r\n    setValue(inputValue)\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Transfer NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{t('Transferring')}:</Text>\r\n          <Value>{t('1x %nftName% NFT', { nftName: nft.name })}</Value>\r\n        </InfoRow>\r\n        <Label htmlFor=\"transferAddress\">{t('Receiving address')}:</Label>\r\n        <Input\r\n          id=\"transferAddress\"\r\n          name=\"address\"\r\n          type=\"text\"\r\n          placeholder={t('Paste address')}\r\n          value={value}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        />\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!account || isLoading || !value}>\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransferNftModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { PromiEvent } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, InjectedModalProps, Modal, Text, Flex, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { Nft } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface ClaimNftModalProps extends InjectedModalProps {\r\n  nft: Nft\r\n  onSuccess: () => void\r\n  onClaim: () => PromiEvent<Contract>\r\n}\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onClaim, onDismiss }) => {\r\n  const [isConfirming, setIsConfirming] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const handleConfirm = async () => {\r\n    onClaim()\r\n      .once('sending', () => {\r\n        setIsConfirming(true)\r\n      })\r\n      .once('receipt', () => {\r\n        toastSuccess(t('Successfully claimed!'))\r\n        onDismiss()\r\n        onSuccess()\r\n      })\r\n      .once('error', (error) => {\r\n        console.error('Unable to claim NFT', error)\r\n        toastError(t('Error'), t('Unable to claim NFT, please try again.'))\r\n        setIsConfirming(false)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Claim Collectible')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\r\n          <Text>{t('You will receive')}:</Text>\r\n          <Text bold>{t('1x %nftName% Collectible', { nftName: nft.name })}</Text>\r\n        </Flex>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          onClick={handleConfirm}\r\n          disabled={!account}\r\n          isLoading={isConfirming}\r\n          endIcon={isConfirming ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimNftModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Nft } from 'config/constants/types'\r\n\r\ninterface PreviewProps {\r\n  nft: Nft\r\n  isOwned?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  position: relative;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  padding-bottom: 100%;\r\n`\r\n\r\nconst StyledImage = styled.img`\r\n  position: absolute;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  transition: opacity 1s linear;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 32px 32px 0 0;\r\n`\r\n\r\nconst StyledVideo = styled.video`\r\n  height: 100%;\r\n  width: 100%;\r\n`\r\n\r\nconst Preview: React.FC<PreviewProps> = ({ nft, isOwned = false }) => {\r\n  const { images, name, video } = nft\r\n  const previewImageSrc = `/images/nfts/${images.lg}`\r\n\r\n  if (video) {\r\n    const videoComponent = (\r\n      <StyledVideo autoPlay controls={false} loop muted poster={previewImageSrc}>\r\n        <source src={video.webm} type=\"video/webm\" />\r\n        <source src={video.mp4} type=\"video/mp4\" />\r\n      </StyledVideo>\r\n    )\r\n\r\n    return isOwned ? (\r\n      <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\r\n        {videoComponent}\r\n      </a>\r\n    ) : (\r\n      videoComponent\r\n    )\r\n  }\r\n\r\n  const previewImage = <StyledImage src={previewImageSrc} alt={name} />\r\n\r\n  return (\r\n    <Container>\r\n      {isOwned ? (\r\n        <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\r\n          {previewImage}\r\n        </a>\r\n      ) : (\r\n        previewImage\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Preview\r\n","import React, { useState } from 'react'\r\nimport { PromiEvent } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport { useProfile } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Nft } from 'config/constants/types'\r\nimport InfoRow from '../InfoRow'\r\nimport TransferNftModal from '../TransferNftModal'\r\nimport ClaimNftModal from '../ClaimNftModal'\r\nimport Preview from './Preview'\r\n\r\nexport interface NftCardProps {\r\n  nft: Nft\r\n  canClaim?: boolean\r\n  tokenIds?: number[]\r\n  onClaim?: () => PromiEvent<Contract>\r\n  refresh: () => void\r\n}\r\n\r\nconst Header = styled(InfoRow)`\r\n  min-height: 28px;\r\n`\r\n\r\nconst DetailsButton = styled(Button).attrs({ variant: 'text' })`\r\n  height: auto;\r\n  padding: 16px 24px;\r\n\r\n  &:hover:not(:disabled):not(:active) {\r\n    background-color: transparent;\r\n  }\r\n\r\n  &:focus:not(:active) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\nconst InfoBlock = styled.div`\r\n  padding: 24px;\r\n`\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft, canClaim = false, tokenIds = [], onClaim, refresh }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { profile } = useProfile()\r\n  const { identifier, name, description } = nft\r\n  const walletOwnsNft = tokenIds.length > 0\r\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon\r\n\r\n  const handleClick = async () => {\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n  const handleSuccess = () => {\r\n    refresh()\r\n  }\r\n\r\n  const [onPresentTransferModal] = useModal(\r\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\r\n  )\r\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} onClaim={onClaim} />)\r\n\r\n  return (\r\n    <Card isActive={walletOwnsNft}>\r\n      <Preview nft={nft} isOwned={walletOwnsNft} />\r\n      <CardBody>\r\n        <Header>\r\n          <Heading>{name}</Heading>\r\n          {walletOwnsNft && (\r\n            <Tag outline variant=\"secondary\">\r\n              {t('In Wallet')}\r\n            </Tag>\r\n          )}\r\n          {profile?.nft?.identifier === identifier && (\r\n            <Tag outline variant=\"success\">\r\n              {t('Profile Pic')}\r\n            </Tag>\r\n          )}\r\n        </Header>\r\n        {canClaim && (\r\n          <Button width=\"100%\" mt=\"24px\" onClick={onPresentClaimModal}>\r\n            {t('Claim this NFT')}\r\n          </Button>\r\n        )}\r\n        {walletOwnsNft && (\r\n          <Button width=\"100%\" variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\r\n            {t('Transfer')}\r\n          </Button>\r\n        )}\r\n      </CardBody>\r\n      <CardFooter p=\"0\">\r\n        <DetailsButton width=\"100%\" endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\r\n          {t('Details')}\r\n        </DetailsButton>\r\n        {isOpen && (\r\n          <InfoBlock>\r\n            <Text as=\"p\" color=\"textSubtle\" style={{ textAlign: 'center' }}>\r\n              {t(description)}\r\n            </Text>\r\n          </InfoBlock>\r\n        )}\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import styled from 'styled-components'\r\n\r\nconst NftGrid = styled.div`\r\n  display: grid;\r\n  grid-gap: 32px;\r\n  grid-template-columns: 1fr;\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: repeat(3, 1fr);\r\n  }\r\n`\r\n\r\nexport default NftGrid\r\n","import React, { useEffect, useState } from 'react'\r\nimport { PromiEvent } from 'web3-core'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useBunnySpecialContract } from 'hooks/useContract'\r\nimport NftCard, { NftCardProps } from './index'\r\n\r\nconst BunnySpecialCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\r\n  const [isClaimable, setIsClaimable] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const bunnySpecialContract = useBunnySpecialContract()\r\n  const { variationId } = nft\r\n\r\n  const handleClaim = (): PromiEvent<Contract> => {\r\n    return bunnySpecialContract.methods.mintNFT(variationId).send({ from: account })\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchClaimStatus = async () => {\r\n      const canClaimSingle = await bunnySpecialContract.methods.canClaimSingle(account, variationId).call()\r\n      setIsClaimable(canClaimSingle)\r\n    }\r\n\r\n    if (account) {\r\n      fetchClaimStatus()\r\n    }\r\n  }, [account, variationId, bunnySpecialContract, setIsClaimable])\r\n\r\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\r\n}\r\n\r\nexport default BunnySpecialCard\r\n","import React, { useEffect, useState } from 'react'\r\nimport { PromiEvent } from 'web3-core'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { useProfile } from 'state/hooks'\r\nimport { useEasterNftContract } from 'hooks/useContract'\r\nimport NftCard, { NftCardProps } from './index'\r\n\r\n/**\r\n * A map of NFT bunny Ids to Team ids\r\n * [identifier]: teamId\r\n */\r\nexport const teamNftMap = {\r\n  'easter-storm': 1,\r\n  'easter-flipper': 2,\r\n  'easter-caker': 3,\r\n}\r\n\r\nconst EasterNftCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\r\n  const [isClaimable, setIsClaimable] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { profile } = useProfile()\r\n  const { identifier } = nft\r\n  const { team } = profile ?? {}\r\n  const easterNftContract = useEasterNftContract()\r\n\r\n  const handleClaim = (): PromiEvent<Contract> => {\r\n    return easterNftContract.methods.mintNFT().send({ from: account })\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchClaimStatus = async () => {\r\n      const canClaim = await easterNftContract.methods.canClaim(account).call()\r\n\r\n      // Wallet can claim if it is claimable and the nft being displayed is mapped to the wallet's team\r\n      setIsClaimable(canClaim ? team.id === teamNftMap[identifier] : false)\r\n    }\r\n\r\n    if (account && team) {\r\n      fetchClaimStatus()\r\n    }\r\n  }, [account, identifier, team, easterNftContract, setIsClaimable])\r\n\r\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\r\n}\r\n\r\nexport default EasterNftCard\r\n","import React from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport nfts from 'config/constants/nfts'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchWalletNfts } from 'state/collectibles'\r\nimport { useGetCollectibles } from 'state/hooks'\r\nimport NftCard from './NftCard'\r\nimport NftGrid from './NftGrid'\r\nimport BunnySpecialCard from './NftCard/BunnySpecialCard'\r\nimport EasterNftCard from './NftCard/EasterNftCard'\r\n\r\n/**\r\n * A map of bunnyIds to special campaigns (NFT distribution)\r\n * Each NftCard is responsible for checking it's own claim status\r\n *\r\n */\r\nconst nftComponents = {\r\n  hiccup: BunnySpecialCard,\r\n  bullish: BunnySpecialCard,\r\n  'easter-storm': EasterNftCard,\r\n  'easter-flipper': EasterNftCard,\r\n  'easter-caker': EasterNftCard,\r\n}\r\n\r\nconst NftList = () => {\r\n  const { tokenIds } = useGetCollectibles()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleRefresh = () => {\r\n    dispatch(fetchWalletNfts(account))\r\n  }\r\n\r\n  return (\r\n    <NftGrid>\r\n      {orderBy(nfts, 'sortOrder').map((nft) => {\r\n        const Card = nftComponents[nft.identifier] ?? NftCard\r\n\r\n        return (\r\n          <div key={nft.name}>\r\n            <Card nft={nft} tokenIds={tokenIds[nft.identifier]} refresh={handleRefresh} />\r\n          </div>\r\n        )\r\n      })}\r\n    </NftGrid>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Page from 'components/layout/Page'\r\nimport NftList from './components/NftList'\r\n\r\nconst StyledHero = styled.div`\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-bottom: 24px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst Collectibles = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Page>\r\n      <StyledHero>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\">\r\n          {t('Pancake Collectibles')}\r\n        </Heading>\r\n      </StyledHero>\r\n      <NftList />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Collectibles\r\n"],"sourceRoot":""}